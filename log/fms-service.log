2020-05-01 17:34:20,921 INFO [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor [DeferredLog.java:225] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-01 17:34:21,339 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 17:34:22,334 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 17:34:22,388 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 50ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 17:34:22,731 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 17:34:23,225 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 17:34:23,237 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 17:34:23,239 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 17:34:23,242 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 17:34:23,244 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 17:34:23,246 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 17:34:23,702 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 17:34:23,933 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 17:34:24,210 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 17:34:24,334 INFO [cluster-ClusterId{value='5eac104795eed4099ea47172', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:1, serverValue:186}] to localhost:27017
2020-05-01 17:34:24,376 INFO [cluster-ClusterId{value='5eac104795eed4099ea47172', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=24623000}
2020-05-01 17:34:24,377 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 17:34:25,005 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 17:34:25,005 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 17:34:25,008 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 17:34:25,008 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 17:34:26,028 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 17:34:26,043 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 17:34:26,467 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 17:34:26,489 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 17:34:26,793 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 17:34:26,793 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 17:34:26,879 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 17:34:26,879 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 17:34:27,015 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 17:34:27,140 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 17:34:27,141 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 17:34:27,141 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 17:34:27,141 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 17:34:27,141 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 17:34:27,141 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 17:34:27,141 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 17:34:27,505 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 17:34:27,507 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 17:34:27,509 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 17:34:27,512 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588334667511 with initial instances count: 0
2020-05-01 17:34:27,516 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 17:34:27,517 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588334667517, current=UP, previous=STARTING]
2020-05-01 17:34:27,519 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 17:34:27,643 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 17:34:27,646 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 17:34:27,674 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 17:34:28,015 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 7.659 seconds (JVM running for 8.585)
2020-05-01 17:34:57,509 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 17:34:57,510 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 17:34:57,510 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 17:34:57,510 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 17:34:57,510 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 17:34:57,510 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: false
2020-05-01 17:34:57,510 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 17:34:57,549 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 17:39:27,146 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 17:44:27,148 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 17:49:27,151 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 17:54:27,154 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 17:59:27,157 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:01:56,365 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=e7b7069dfe2e63fa/e7b7069dfe2e63fa, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@3c574506, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:01:56,366 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:01:56,366 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:01:56,685 INFO [reactor-http-nio-3] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: localhost.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 18:01:56,725 INFO [reactor-http-nio-3] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:58] Shutdown hook installed for: NFLoadBalancer-PingTimer-localhost
2020-05-01 18:01:56,726 INFO [reactor-http-nio-3] c.n.l.BaseLoadBalancer [BaseLoadBalancer.java:197] Client: localhost instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=localhost,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-05-01 18:01:56,744 INFO [reactor-http-nio-3] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:222] Using serverListUpdater PollingServerListUpdater
2020-05-01 18:01:56,747 INFO [reactor-http-nio-3] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:150] DynamicServerListLoadBalancer for client localhost initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=localhost,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@391b86b9
2020-05-01 18:01:56,756 WARN [reactor-http-nio-3] o.s.c.c.l.r.LoadBalancerExchangeFilterFunction [LoadBalancerExchangeFilterFunction.java:68] Load balancer does not contain an instance for the service localhost
2020-05-01 18:01:56,773 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:314] | onError(org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN )
2020-05-01 18:01:56,774 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:319] 
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:01:56,795 ERROR [reactor-http-nio-3] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [cf0aae17-1]  500 Server Error for HTTP POST "/userInfo"
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.UserInfoController#insertUserInfo(User) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/userInfo" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:03:40,296 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=608462031064556e/608462031064556e, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@76088306, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:03:40,296 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:03:40,297 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:03:40,297 WARN [reactor-http-nio-3] o.s.c.c.l.r.LoadBalancerExchangeFilterFunction [LoadBalancerExchangeFilterFunction.java:68] Load balancer does not contain an instance for the service localhost
2020-05-01 18:03:40,298 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:314] | onError(org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN )
2020-05-01 18:03:40,298 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:319] 
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:03:40,301 ERROR [reactor-http-nio-3] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [cf0aae17-2]  500 Server Error for HTTP POST "/userInfo"
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.UserInfoController#insertUserInfo(User) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/userInfo" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:04:27,159 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:06:21,776 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=aaca6123a0e9bcba/aaca6123a0e9bcba, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@41c19d8f, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:06:21,776 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:06:21,777 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:06:21,777 WARN [reactor-http-nio-3] o.s.c.c.l.r.LoadBalancerExchangeFilterFunction [LoadBalancerExchangeFilterFunction.java:68] Load balancer does not contain an instance for the service localhost
2020-05-01 18:06:21,778 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:314] | onError(org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN )
2020-05-01 18:06:21,778 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:319] 
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:06:21,783 ERROR [reactor-http-nio-3] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [cf0aae17-3]  500 Server Error for HTTP POST "/userInfo"
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.UserInfoController#insertUserInfo(User) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/userInfo" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:06:44,459 INFO [RMI TCP Connection(4)-127.0.0.1] o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin [SpringApplicationAdminMXBeanRegistrar.java:159] Application shutdown requested.
2020-05-01 18:06:44,459 INFO [RMI TCP Connection(4)-127.0.0.1] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 18:06:44,459 WARN [RMI TCP Connection(4)-127.0.0.1] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588336604459, current=DOWN, previous=UP]
2020-05-01 18:06:44,460 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:06:44,463 INFO [RMI TCP Connection(4)-127.0.0.1] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:67] Shutdown hook removed for: NFLoadBalancer-PingTimer-localhost
2020-05-01 18:06:44,464 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:06:47,498 INFO [Thread-17] c.n.l.PollingServerListUpdater [PollingServerListUpdater.java:53] Shutting down the Executor Pool for PollingServerListUpdater
2020-05-01 18:06:48,527 INFO [RMI TCP Connection(4)-127.0.0.1] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 18:06:51,532 INFO [RMI TCP Connection(4)-127.0.0.1] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 18:06:51,563 INFO [RMI TCP Connection(4)-127.0.0.1] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 18:06:51,582 INFO [RMI TCP Connection(4)-127.0.0.1] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 18:08:21,382 INFO [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor [DeferredLog.java:225] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-01 18:08:21,767 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 18:08:22,387 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 18:08:22,439 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 49ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 18:08:22,695 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 18:08:22,904 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:22,914 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:22,915 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:22,919 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:22,920 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:22,923 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:23,169 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 18:08:23,262 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:08:23,350 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 18:08:23,472 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:08:23,544 INFO [cluster-ClusterId{value='5eac183f4e7a4b620d9b79b0', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:1, serverValue:198}] to localhost:27017
2020-05-01 18:08:23,550 INFO [cluster-ClusterId{value='5eac183f4e7a4b620d9b79b0', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4825500}
2020-05-01 18:08:23,861 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:08:23,862 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:08:23,865 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:08:23,865 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:08:24,876 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:08:24,896 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:08:25,265 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 18:08:25,307 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 18:08:25,591 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 18:08:25,591 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 18:08:25,673 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 18:08:25,674 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 18:08:25,850 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:08:25,976 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 18:08:25,977 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 18:08:25,977 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 18:08:25,977 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 18:08:25,977 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 18:08:25,978 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 18:08:25,978 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 18:08:26,107 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 18:08:26,109 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 18:08:26,113 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 18:08:26,117 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588336706116 with initial instances count: 2
2020-05-01 18:08:26,122 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 18:08:26,123 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588336706123, current=UP, previous=STARTING]
2020-05-01 18:08:26,125 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:08:26,175 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:08:26,185 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 18:08:26,187 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 18:08:26,547 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 5.645 seconds (JVM running for 6.459)
2020-05-01 18:08:48,656 INFO [Thread-2] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 18:08:48,656 WARN [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588336728656, current=DOWN, previous=UP]
2020-05-01 18:08:48,656 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:08:48,662 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:08:52,833 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 18:08:55,841 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 18:08:55,847 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 18:08:55,854 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 18:08:56,355 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 18:08:56,569 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 18:08:56,582 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 12ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 18:08:56,659 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 18:08:56,683 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:56,686 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:56,686 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:56,688 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:56,689 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:56,689 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:08:56,737 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 18:08:56,746 INFO [cluster-ClusterId{value='5eac18604e7a4b620d9b79b1', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:2, serverValue:199}] to localhost:27017
2020-05-01 18:08:56,749 INFO [cluster-ClusterId{value='5eac18604e7a4b620d9b79b1', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=1397800}
2020-05-01 18:08:56,750 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:08:56,800 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 18:08:56,820 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:08:56,971 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:08:56,971 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:08:57,748 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:08:57,760 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:08:57,844 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 18:08:57,847 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 18:08:57,850 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 18:08:57,851 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 18:08:57,851 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 18:08:57,851 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 18:08:57,952 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:08:57,953 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 18:08:57,953 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 18:08:57,953 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 18:08:57,953 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 18:08:57,953 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 18:08:57,953 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 18:08:57,954 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 18:08:57,958 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 18:08:57,958 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 18:08:57,959 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 18:08:57,960 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588336737960 with initial instances count: 3
2020-05-01 18:08:57,966 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 18:08:57,966 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588336737966, current=UP, previous=STARTING]
2020-05-01 18:08:57,967 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:08:57,971 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:08:57,977 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 18:08:57,977 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 18:08:58,293 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.322 seconds (JVM running for 38.205)
2020-05-01 18:08:58,295 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 18:10:01,710 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=3449cfaa616c0799/3449cfaa616c0799, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@796e8c1a, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:10:01,711 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:10:01,712 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:10:01,821 INFO [reactor-http-nio-3] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: localhost.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 18:10:01,844 INFO [reactor-http-nio-3] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:58] Shutdown hook installed for: NFLoadBalancer-PingTimer-localhost
2020-05-01 18:10:01,846 INFO [reactor-http-nio-3] c.n.l.BaseLoadBalancer [BaseLoadBalancer.java:197] Client: localhost instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=localhost,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-05-01 18:10:01,851 INFO [reactor-http-nio-3] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:222] Using serverListUpdater PollingServerListUpdater
2020-05-01 18:10:01,855 INFO [reactor-http-nio-3] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:150] DynamicServerListLoadBalancer for client localhost initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=localhost,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@5fbb8433
2020-05-01 18:10:01,867 WARN [reactor-http-nio-3] o.s.c.c.l.r.LoadBalancerExchangeFilterFunction [LoadBalancerExchangeFilterFunction.java:68] Load balancer does not contain an instance for the service localhost
2020-05-01 18:10:01,885 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:314] | onError(org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN )
2020-05-01 18:10:01,887 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:319] 
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:10:01,900 ERROR [reactor-http-nio-3] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [dba343d0-1]  500 Server Error for HTTP POST "/userInfo"
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.UserInfoController#insertUserInfo(User) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/userInfo" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:11:29,972 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=fb46f13409a940bd/fb46f13409a940bd, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@66805cbf, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:11:29,973 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:11:29,973 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:11:29,974 WARN [reactor-http-nio-3] o.s.c.c.l.r.LoadBalancerExchangeFilterFunction [LoadBalancerExchangeFilterFunction.java:68] Load balancer does not contain an instance for the service localhost
2020-05-01 18:11:29,975 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:314] | onError(org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN )
2020-05-01 18:11:29,975 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:319] 
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:11:29,977 ERROR [reactor-http-nio-3] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [dba343d0-2]  500 Server Error for HTTP POST "/userInfo"
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.UserInfoController#insertUserInfo(User) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/userInfo" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:13:08,732 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=7953c78820aaaa90/7953c78820aaaa90, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6eeaf4cb, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:13:08,733 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:13:08,733 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:13:08,734 WARN [reactor-http-nio-3] o.s.c.c.l.r.LoadBalancerExchangeFilterFunction [LoadBalancerExchangeFilterFunction.java:68] Load balancer does not contain an instance for the service localhost
2020-05-01 18:13:08,735 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:314] | onError(org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN )
2020-05-01 18:13:08,736 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:319] 
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:13:08,738 ERROR [reactor-http-nio-3] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [dba343d0-3]  500 Server Error for HTTP POST "/userInfo"
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.UserInfoController#insertUserInfo(User) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/userInfo" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:13:25,145 INFO [Thread-12] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 18:13:25,146 WARN [Thread-12] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588337005146, current=DOWN, previous=UP]
2020-05-01 18:13:25,147 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:13:25,153 INFO [Thread-12] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:67] Shutdown hook removed for: NFLoadBalancer-PingTimer-localhost
2020-05-01 18:13:25,154 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:13:29,302 INFO [Thread-12] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 18:13:32,307 INFO [Thread-12] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 18:13:32,312 INFO [Thread-12] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 18:13:32,318 INFO [Thread-12] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 18:13:32,913 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 18:13:33,195 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 18:13:33,203 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 8ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 18:13:33,276 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 18:13:33,300 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:13:33,302 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:13:33,303 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:13:33,304 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:13:33,305 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:13:33,306 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:13:33,352 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 18:13:33,362 INFO [cluster-ClusterId{value='5eac19754e7a4b620d9b79b2', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:3, serverValue:200}] to localhost:27017
2020-05-01 18:13:33,364 INFO [cluster-ClusterId{value='5eac19754e7a4b620d9b79b2', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=1018300}
2020-05-01 18:13:33,366 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:13:33,395 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 18:13:33,418 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:13:33,565 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:13:33,565 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:13:34,318 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:13:34,329 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:13:34,409 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 18:13:34,411 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 18:13:34,412 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 18:13:34,413 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 18:13:34,413 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 18:13:34,413 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 18:13:34,504 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:13:34,505 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 18:13:34,507 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 18:13:34,507 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 18:13:34,507 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 18:13:34,507 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 18:13:34,507 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 18:13:34,507 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 18:13:34,510 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 18:13:34,511 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 18:13:34,511 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 18:13:34,512 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588337014512 with initial instances count: 3
2020-05-01 18:13:34,517 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 18:13:34,517 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588337014517, current=UP, previous=STARTING]
2020-05-01 18:13:34,518 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:13:34,521 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:13:34,527 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 18:13:34,528 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 18:13:34,849 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.334 seconds (JVM running for 314.76)
2020-05-01 18:13:34,851 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 18:15:41,190 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=6bf64309f96d72f9/6bf64309f96d72f9, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@4bebab2e, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:15:41,191 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:15:41,191 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:15:41,229 INFO [reactor-http-nio-3] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: localhost.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 18:15:41,231 INFO [reactor-http-nio-3] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:58] Shutdown hook installed for: NFLoadBalancer-PingTimer-localhost
2020-05-01 18:15:41,232 INFO [reactor-http-nio-3] c.n.l.BaseLoadBalancer [BaseLoadBalancer.java:197] Client: localhost instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=localhost,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-05-01 18:15:41,233 INFO [reactor-http-nio-3] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:222] Using serverListUpdater PollingServerListUpdater
2020-05-01 18:15:41,234 INFO [reactor-http-nio-3] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:150] DynamicServerListLoadBalancer for client localhost initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=localhost,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@6bc91fb5
2020-05-01 18:15:41,240 WARN [reactor-http-nio-3] o.s.c.c.l.r.LoadBalancerExchangeFilterFunction [LoadBalancerExchangeFilterFunction.java:68] Load balancer does not contain an instance for the service localhost
2020-05-01 18:15:41,242 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:314] | onError(org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN )
2020-05-01 18:15:41,242 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:319] 
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:15:41,245 ERROR [reactor-http-nio-3] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [a486d0cc-4]  500 Server Error for HTTP POST "/userInfo"
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.UserInfoController#insertUserInfo(User) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/userInfo" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:16:10,027 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=a547569054f3c06a/a547569054f3c06a, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@165ee7dd, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:16:10,028 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:16:10,028 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:16:10,028 WARN [reactor-http-nio-3] o.s.c.c.l.r.LoadBalancerExchangeFilterFunction [LoadBalancerExchangeFilterFunction.java:68] Load balancer does not contain an instance for the service localhost
2020-05-01 18:16:10,029 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:314] | onError(org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN )
2020-05-01 18:16:10,029 ERROR [reactor-http-nio-3] Post User info data [Loggers.java:319] 
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:16:10,032 ERROR [reactor-http-nio-3] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [a486d0cc-5]  500 Server Error for HTTP POST "/userInfo"
org.springframework.web.reactive.function.client.WebClientResponseException$ServiceUnavailable: 503 Service Unavailable from UNKNOWN 
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 503 from POST http://localhost:8081/user/userInfo [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.UserInfoController#insertUserInfo(User) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/userInfo" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:207)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:120)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onSubscribe(MonoCollect.java:120)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:298)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:137)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:18:34,510 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:19:39,379 INFO [Thread-30] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 18:19:39,380 WARN [Thread-30] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588337379380, current=DOWN, previous=UP]
2020-05-01 18:19:39,380 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:19:39,383 INFO [Thread-30] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:67] Shutdown hook removed for: NFLoadBalancer-PingTimer-localhost
2020-05-01 18:19:39,387 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:19:43,531 INFO [Thread-30] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 18:19:46,537 INFO [Thread-30] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 18:19:46,541 INFO [Thread-30] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 18:19:46,547 INFO [Thread-30] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 18:19:47,130 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 18:19:47,335 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 18:19:47,344 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 8ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 18:19:47,417 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 18:19:47,442 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:19:47,444 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:19:47,445 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:19:47,446 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:19:47,447 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:19:47,448 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:19:47,495 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 18:19:47,514 INFO [cluster-ClusterId{value='5eac1aeb4e7a4b620d9b79b3', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:4, serverValue:208}] to localhost:27017
2020-05-01 18:19:47,516 INFO [cluster-ClusterId{value='5eac1aeb4e7a4b620d9b79b3', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=734600}
2020-05-01 18:19:47,519 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:19:47,550 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 18:19:47,572 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:19:47,718 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:19:47,718 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:19:48,474 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:19:48,485 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:19:48,564 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 18:19:48,566 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 18:19:48,567 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 18:19:48,567 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 18:19:48,567 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 18:19:48,567 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 18:19:48,659 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:19:48,660 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 18:19:48,660 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 18:19:48,660 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 18:19:48,660 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 18:19:48,660 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 18:19:48,660 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 18:19:48,660 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 18:19:48,664 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 18:19:48,664 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 18:19:48,665 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 18:19:48,666 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588337388666 with initial instances count: 3
2020-05-01 18:19:48,671 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 18:19:48,671 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588337388671, current=UP, previous=STARTING]
2020-05-01 18:19:48,672 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:19:48,675 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:19:48,681 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 18:19:48,682 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 18:19:48,997 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.264 seconds (JVM running for 688.909)
2020-05-01 18:19:48,999 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 18:20:19,402 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=7c91b8aaedc9322f/7c91b8aaedc9322f, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1f913cea, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:20:19,403 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:20:19,403 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:20:19,436 INFO [reactor-http-nio-3] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 18:20:19,439 INFO [reactor-http-nio-3] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:58] Shutdown hook installed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 18:20:19,439 INFO [reactor-http-nio-3] c.n.l.BaseLoadBalancer [BaseLoadBalancer.java:197] Client: fms-events instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-05-01 18:20:19,440 INFO [reactor-http-nio-3] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:222] Using serverListUpdater PollingServerListUpdater
2020-05-01 18:20:19,490 INFO [reactor-http-nio-3] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 18:20:19,492 INFO [reactor-http-nio-3] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:150] DynamicServerListLoadBalancer for client fms-events initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[DESKTOP-1QKKEMV:8081],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:DESKTOP-1QKKEMV:8081;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 05:30:00 IST 1970;	First connection made: Thu Jan 01 05:30:00 IST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@52245d7f
2020-05-01 18:20:20,445 INFO [PollingServerListUpdater-0] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 18:20:28,144 INFO [reactor-http-nio-4] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 18:20:28,145 INFO [reactor-http-nio-4] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 18:20:53,666 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=797a8ca499d7a4ca/797a8ca499d7a4ca, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@29d5a53c, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:20:53,666 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:20:53,667 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:20:53,678 INFO [reactor-http-nio-4] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 18:20:53,678 INFO [reactor-http-nio-4] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 18:21:09,226 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=ae11129c40e93249/ae11129c40e93249, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1a7d828e, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:21:09,227 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:21:09,227 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:21:09,234 INFO [reactor-http-nio-4] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 18:21:09,234 INFO [reactor-http-nio-4] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 18:21:13,684 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=24f9e24e4c3fab9e/24f9e24e4c3fab9e, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@341ee9c4, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:21:13,685 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:21:13,685 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 18:21:13,691 INFO [reactor-http-nio-4] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 18:21:13,692 INFO [reactor-http-nio-4] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 18:21:50,165 INFO [Thread-45] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 18:21:50,165 WARN [Thread-45] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588337510165, current=DOWN, previous=UP]
2020-05-01 18:21:50,166 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:21:50,170 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:21:50,170 INFO [Thread-45] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:67] Shutdown hook removed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 18:21:54,219 INFO [Thread-45] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 18:21:57,227 INFO [Thread-45] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 18:21:57,231 INFO [Thread-45] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 18:21:57,237 INFO [Thread-45] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 18:21:57,842 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 18:21:58,049 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 18:21:58,057 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 8ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 18:21:58,128 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 18:21:58,143 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:21:58,146 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:21:58,146 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:21:58,147 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:21:58,148 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:21:58,149 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:21:58,197 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 18:21:58,205 INFO [cluster-ClusterId{value='5eac1b6e4e7a4b620d9b79b4', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:5, serverValue:209}] to localhost:27017
2020-05-01 18:21:58,207 INFO [cluster-ClusterId{value='5eac1b6e4e7a4b620d9b79b4', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=836900}
2020-05-01 18:21:58,209 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:21:58,241 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 18:21:58,265 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:21:58,441 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:21:58,442 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:21:59,204 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:21:59,216 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:21:59,296 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 18:21:59,297 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 18:21:59,298 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 18:21:59,299 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 18:21:59,299 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 18:21:59,299 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 18:21:59,391 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:21:59,392 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 18:21:59,392 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 18:21:59,392 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 18:21:59,393 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 18:21:59,393 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 18:21:59,393 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 18:21:59,393 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 18:21:59,396 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 18:21:59,397 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 18:21:59,397 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 18:21:59,398 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588337519398 with initial instances count: 3
2020-05-01 18:21:59,403 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 18:21:59,403 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588337519403, current=UP, previous=STARTING]
2020-05-01 18:21:59,404 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:21:59,409 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:21:59,414 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 18:21:59,415 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 18:21:59,734 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.286 seconds (JVM running for 819.646)
2020-05-01 18:21:59,736 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 18:22:15,068 INFO [Thread-61] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 18:22:15,070 WARN [Thread-61] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588337535070, current=DOWN, previous=UP]
2020-05-01 18:22:15,070 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:22:15,078 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:22:19,110 INFO [Thread-61] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 18:22:22,118 INFO [Thread-61] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 18:22:22,121 INFO [Thread-61] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 18:22:22,127 INFO [Thread-61] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 18:22:22,739 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 18:22:22,939 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 18:22:22,947 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 7ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 18:22:23,023 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 18:22:23,039 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:23,042 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:23,043 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:23,044 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:23,045 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:23,046 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:23,093 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 18:22:23,102 INFO [cluster-ClusterId{value='5eac1b874e7a4b620d9b79b5', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:6, serverValue:210}] to localhost:27017
2020-05-01 18:22:23,105 INFO [cluster-ClusterId{value='5eac1b874e7a4b620d9b79b5', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=827900}
2020-05-01 18:22:23,107 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:22:23,139 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 18:22:23,157 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:22:23,297 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:22:23,297 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:22:24,046 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:22:24,058 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:22:24,134 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 18:22:24,137 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 18:22:24,137 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 18:22:24,138 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 18:22:24,138 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 18:22:24,138 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 18:22:24,226 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:22:24,227 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 18:22:24,227 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 18:22:24,227 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 18:22:24,227 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 18:22:24,227 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 18:22:24,227 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 18:22:24,228 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 18:22:24,231 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 18:22:24,231 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 18:22:24,232 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 18:22:24,233 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588337544233 with initial instances count: 3
2020-05-01 18:22:24,238 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 18:22:24,239 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588337544239, current=UP, previous=STARTING]
2020-05-01 18:22:24,239 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:22:24,242 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:22:24,248 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 18:22:24,249 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 18:22:24,560 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.258 seconds (JVM running for 844.472)
2020-05-01 18:22:24,562 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 18:22:27,916 INFO [Thread-70] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 18:22:27,917 WARN [Thread-70] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588337547917, current=DOWN, previous=UP]
2020-05-01 18:22:27,917 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:22:27,923 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:22:31,963 INFO [Thread-70] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 18:22:34,972 INFO [Thread-70] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 18:22:34,978 INFO [Thread-70] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 18:22:34,995 INFO [Thread-70] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 18:22:35,602 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 18:22:35,826 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 18:22:35,835 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 8ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 18:22:35,919 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 18:22:35,938 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:35,941 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:35,941 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:35,942 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:35,944 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:35,944 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:22:36,000 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 18:22:36,016 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:22:36,021 INFO [cluster-ClusterId{value='5eac1b944e7a4b620d9b79b6', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:7, serverValue:211}] to localhost:27017
2020-05-01 18:22:36,023 INFO [cluster-ClusterId{value='5eac1b944e7a4b620d9b79b6', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=992500}
2020-05-01 18:22:36,056 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 18:22:36,074 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:22:36,208 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:22:36,208 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:22:36,955 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:22:36,966 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:22:37,043 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 18:22:37,045 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 18:22:37,046 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 18:22:37,046 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 18:22:37,046 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 18:22:37,046 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 18:22:37,134 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:22:37,135 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 18:22:37,135 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 18:22:37,136 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 18:22:37,136 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 18:22:37,136 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 18:22:37,136 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 18:22:37,136 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 18:22:37,139 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 18:22:37,139 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 18:22:37,140 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 18:22:37,140 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588337557140 with initial instances count: 3
2020-05-01 18:22:37,146 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 18:22:37,146 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588337557146, current=UP, previous=STARTING]
2020-05-01 18:22:37,147 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:22:37,153 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:22:37,157 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 18:22:37,157 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 18:22:37,490 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.284 seconds (JVM running for 857.402)
2020-05-01 18:22:37,492 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 18:27:37,138 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:32:37,139 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:37:37,142 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:42:37,144 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:46:28,485 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=5925e7001d831dbd/5925e7001d831dbd, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@256e0425, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:46:28,486 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:46:28,486 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:46:28,789 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onNext(User(employeeId=1101, email=Amirtha@GMAIL.COM, mobileNo=1234567890, empName=null, username=admin, password=dQNjUIMorJb8Ubj2+wVGYp6eAeYkdekqAcnYp+aRq5w=, enabled=false, role=admin, roles=null))
2020-05-01 18:46:28,858 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onComplete()
2020-05-01 18:47:11,878 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=291f2934290a83c4/291f2934290a83c4, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@7d33c21b, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:47:11,879 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:47:11,879 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:47:11,885 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onNext(User(employeeId=1102, email=pmo@GMAIL.COM, mobileNo=1234567891, empName=null, username=pmo, password=S3ReJy0odJ/k1Kh7JYY/cPplbH+Gls/Y5BbO5fwGDE0=, enabled=false, role=pmo, roles=null))
2020-05-01 18:47:11,887 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onComplete()
2020-05-01 18:47:32,623 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=c6771a3995b1199e/c6771a3995b1199e, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@125936c, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:47:32,623 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:47:32,623 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:47:32,629 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onNext(User(employeeId=1103, email=poc@GMAIL.COM, mobileNo=1234567892, empName=null, username=poc, password=kXfZwSmUmW1Hh5Nf8vksyzkh/0J6UJoqWPUg/8ugg7Q=, enabled=false, role=poc, roles=null))
2020-05-01 18:47:32,631 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onComplete()
2020-05-01 18:47:37,146 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:47:53,252 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=ff21bebcfc3abc77/ff21bebcfc3abc77, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@709335b, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:47:53,253 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:47:53,253 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:47:53,373 ERROR [reactor-http-nio-4] get UserInfo data [Loggers.java:314] | onError(org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError: 500 Internal Server Error from GET http://localhost:8081/user/userInfo/Sundar123)
2020-05-01 18:47:53,373 ERROR [reactor-http-nio-4] get UserInfo data [Loggers.java:319] 
org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError: 500 Internal Server Error from GET http://localhost:8081/user/userInfo/Sundar123
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:201)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 500 from GET http://localhost:8081/user/userInfo/Sundar123 [DefaultWebClient]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:201)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:367)
		at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:363)
		at reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:412)
		at reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:585)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:90)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:47:53,376 ERROR [reactor-http-nio-4] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [e8a20089-13]  500 Server Error for HTTP POST "/login"
org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError: 500 Internal Server Error from GET http://localhost:8081/user/userInfo/Sundar123
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:201)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 500 from GET http://localhost:8081/user/userInfo/Sundar123 [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.AuthenticationController#login(AuthRequest) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/login" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:201)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:367)
		at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:363)
		at reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:412)
		at reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:585)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:90)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:51:59,008 INFO [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor [DeferredLog.java:225] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-01 18:51:59,410 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 18:51:59,963 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 18:52:00,017 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 51ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 18:52:00,271 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 18:52:00,482 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:52:00,493 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:52:00,494 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:52:00,498 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:52:00,500 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:52:00,502 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:52:00,740 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 18:52:00,841 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:52:00,930 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 18:52:00,989 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:52:01,169 INFO [cluster-ClusterId{value='5eac227885f8b709fad1b4c2', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:1, serverValue:217}] to localhost:27017
2020-05-01 18:52:01,173 INFO [cluster-ClusterId{value='5eac227885f8b709fad1b4c2', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=3008100}
2020-05-01 18:52:01,465 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:52:01,465 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:52:01,469 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:52:01,469 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:52:02,421 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:52:02,441 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:52:02,794 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 18:52:02,820 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 18:52:03,088 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 18:52:03,088 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 18:52:03,175 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 18:52:03,175 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 18:52:03,359 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:52:03,482 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 18:52:03,483 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 18:52:03,483 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 18:52:03,483 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 18:52:03,483 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 18:52:03,483 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 18:52:03,484 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 18:52:03,612 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 18:52:03,614 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 18:52:03,617 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 18:52:03,622 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588339323621 with initial instances count: 3
2020-05-01 18:52:03,627 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 18:52:03,627 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588339323627, current=UP, previous=STARTING]
2020-05-01 18:52:03,629 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:52:03,662 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:52:03,673 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 18:52:03,675 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 18:52:04,016 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 5.477 seconds (JVM running for 6.327)
2020-05-01 18:52:38,207 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=c615c5342f176991/c615c5342f176991, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@3f48813, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:52:38,208 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:52:38,208 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:52:38,254 ERROR [reactor-http-nio-4] get UserInfo data [Loggers.java:314] | onError(java.net.UnknownHostException: fms-events)
2020-05-01 18:52:38,256 ERROR [reactor-http-nio-4] get UserInfo data [Loggers.java:319] 
java.net.UnknownHostException: fms-events
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Request to GET http://fms-events/user/userInfo/Mano [DefaultWebClient]
Stack trace:
		at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
		at java.net.InetAddress$2.lookupAllHostAddr(Unknown Source)
		at java.net.InetAddress.getAddressesFromNameService(Unknown Source)
		at java.net.InetAddress.getAllByName0(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getByName(Unknown Source)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:156)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:153)
		at java.security.AccessController.doPrivileged(Native Method)
		at io.netty.util.internal.SocketUtils.addressByName(SocketUtils.java:153)
		at io.netty.resolver.DefaultNameResolver.doResolve(DefaultNameResolver.java:41)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:61)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:53)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:55)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:31)
		at io.netty.resolver.AbstractAddressResolver.resolve(AbstractAddressResolver.java:106)
		at io.netty.bootstrap.Bootstrap.doResolveAndConnect0(Bootstrap.java:200)
		at io.netty.bootstrap.Bootstrap.access$000(Bootstrap.java:46)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:180)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:166)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:551)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:604)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)
		at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:84)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetSuccess(AbstractChannel.java:984)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:504)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.access$200(AbstractChannel.java:417)
		at io.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:474)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:52:38,269 ERROR [reactor-http-nio-4] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [8010a3eb-1]  500 Server Error for HTTP POST "/login"
java.net.UnknownHostException: fms-events
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Request to GET http://fms-events/user/userInfo/Mano [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.AuthenticationController#login(AuthRequest) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/login" [ExceptionHandlingWebHandler]
Stack trace:
		at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
		at java.net.InetAddress$2.lookupAllHostAddr(Unknown Source)
		at java.net.InetAddress.getAddressesFromNameService(Unknown Source)
		at java.net.InetAddress.getAllByName0(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getByName(Unknown Source)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:156)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:153)
		at java.security.AccessController.doPrivileged(Native Method)
		at io.netty.util.internal.SocketUtils.addressByName(SocketUtils.java:153)
		at io.netty.resolver.DefaultNameResolver.doResolve(DefaultNameResolver.java:41)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:61)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:53)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:55)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:31)
		at io.netty.resolver.AbstractAddressResolver.resolve(AbstractAddressResolver.java:106)
		at io.netty.bootstrap.Bootstrap.doResolveAndConnect0(Bootstrap.java:200)
		at io.netty.bootstrap.Bootstrap.access$000(Bootstrap.java:46)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:180)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:166)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:551)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:604)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)
		at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:84)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetSuccess(AbstractChannel.java:984)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:504)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.access$200(AbstractChannel.java:417)
		at io.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:474)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:53:25,736 INFO [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor [DeferredLog.java:225] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-01 18:53:26,122 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 18:53:26,595 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 18:53:26,645 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 47ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 18:53:26,884 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 18:53:27,093 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:53:27,103 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:53:27,105 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:53:27,109 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:53:27,110 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:53:27,113 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:53:27,342 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 18:53:27,442 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:53:27,534 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 18:53:27,584 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:53:27,739 INFO [cluster-ClusterId{value='5eac22cfd9d6725424576fdf', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:1, serverValue:218}] to localhost:27017
2020-05-01 18:53:27,744 INFO [cluster-ClusterId{value='5eac22cfd9d6725424576fdf', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=3134400}
2020-05-01 18:53:28,043 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:53:28,043 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:53:28,046 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:53:28,046 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:53:28,983 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:53:28,999 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:53:29,325 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 18:53:29,352 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 18:53:29,632 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 18:53:29,633 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 18:53:29,718 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 18:53:29,718 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 18:53:29,894 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:53:30,016 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 18:53:30,016 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 18:53:30,017 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 18:53:30,017 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 18:53:30,017 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 18:53:30,017 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 18:53:30,017 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 18:53:30,145 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 18:53:30,148 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 18:53:30,152 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 18:53:30,157 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588339410156 with initial instances count: 3
2020-05-01 18:53:30,162 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 18:53:30,162 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588339410162, current=UP, previous=STARTING]
2020-05-01 18:53:30,164 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:53:30,196 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:53:30,206 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 18:53:30,208 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 18:53:30,545 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 5.273 seconds (JVM running for 6.107)
2020-05-01 18:56:11,035 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=84ef7ee5921d7749/84ef7ee5921d7749, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6f4df085, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:56:11,036 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:56:11,037 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:56:11,091 ERROR [reactor-http-nio-4] get UserInfo data [Loggers.java:314] | onError(java.net.UnknownHostException: fms-events)
2020-05-01 18:56:11,092 ERROR [reactor-http-nio-4] get UserInfo data [Loggers.java:319] 
java.net.UnknownHostException: fms-events
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Request to GET http://fms-events/user/userInfo/Mano [DefaultWebClient]
Stack trace:
		at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
		at java.net.InetAddress$2.lookupAllHostAddr(Unknown Source)
		at java.net.InetAddress.getAddressesFromNameService(Unknown Source)
		at java.net.InetAddress.getAllByName0(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getByName(Unknown Source)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:156)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:153)
		at java.security.AccessController.doPrivileged(Native Method)
		at io.netty.util.internal.SocketUtils.addressByName(SocketUtils.java:153)
		at io.netty.resolver.DefaultNameResolver.doResolve(DefaultNameResolver.java:41)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:61)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:53)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:55)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:31)
		at io.netty.resolver.AbstractAddressResolver.resolve(AbstractAddressResolver.java:106)
		at io.netty.bootstrap.Bootstrap.doResolveAndConnect0(Bootstrap.java:200)
		at io.netty.bootstrap.Bootstrap.access$000(Bootstrap.java:46)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:180)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:166)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:551)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:604)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)
		at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:84)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetSuccess(AbstractChannel.java:984)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:504)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.access$200(AbstractChannel.java:417)
		at io.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:474)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:56:11,108 ERROR [reactor-http-nio-4] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [31987cee-1]  500 Server Error for HTTP POST "/login"
java.net.UnknownHostException: fms-events
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Request to GET http://fms-events/user/userInfo/Mano [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.AuthenticationController#login(AuthRequest) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/login" [ExceptionHandlingWebHandler]
Stack trace:
		at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
		at java.net.InetAddress$2.lookupAllHostAddr(Unknown Source)
		at java.net.InetAddress.getAddressesFromNameService(Unknown Source)
		at java.net.InetAddress.getAllByName0(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getByName(Unknown Source)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:156)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:153)
		at java.security.AccessController.doPrivileged(Native Method)
		at io.netty.util.internal.SocketUtils.addressByName(SocketUtils.java:153)
		at io.netty.resolver.DefaultNameResolver.doResolve(DefaultNameResolver.java:41)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:61)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:53)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:55)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:31)
		at io.netty.resolver.AbstractAddressResolver.resolve(AbstractAddressResolver.java:106)
		at io.netty.bootstrap.Bootstrap.doResolveAndConnect0(Bootstrap.java:200)
		at io.netty.bootstrap.Bootstrap.access$000(Bootstrap.java:46)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:180)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:166)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:551)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:604)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)
		at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:84)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetSuccess(AbstractChannel.java:984)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:504)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.access$200(AbstractChannel.java:417)
		at io.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:474)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:57:02,058 INFO [Thread-2] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 18:57:02,059 WARN [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588339622059, current=DOWN, previous=UP]
2020-05-01 18:57:02,060 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:57:02,065 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:57:06,111 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 18:57:09,120 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 18:57:09,131 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 18:57:09,149 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 18:57:09,668 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 18:57:09,892 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 18:57:09,901 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 9ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 18:57:09,996 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 18:57:10,029 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:57:10,033 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:57:10,034 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:57:10,036 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:57:10,038 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:57:10,039 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:57:10,106 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 18:57:10,115 INFO [cluster-ClusterId{value='5eac23aed9d6725424576fe0', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:2, serverValue:219}] to localhost:27017
2020-05-01 18:57:10,118 INFO [cluster-ClusterId{value='5eac23aed9d6725424576fe0', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2009200}
2020-05-01 18:57:10,120 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:57:10,150 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 18:57:10,172 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:57:10,324 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:57:10,324 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:57:11,055 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:57:11,067 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:57:11,268 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 18:57:11,272 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 18:57:11,275 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 18:57:11,275 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 18:57:11,275 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 18:57:11,275 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 18:57:11,377 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:57:11,378 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 18:57:11,378 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 18:57:11,378 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 18:57:11,378 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 18:57:11,379 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 18:57:11,379 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 18:57:11,379 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 18:57:11,382 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 18:57:11,383 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 18:57:11,384 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 18:57:11,385 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588339631385 with initial instances count: 3
2020-05-01 18:57:11,390 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 18:57:11,391 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588339631390, current=UP, previous=STARTING]
2020-05-01 18:57:11,391 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:57:11,395 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:57:11,400 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 18:57:11,401 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 18:57:11,699 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.43 seconds (JVM running for 227.261)
2020-05-01 18:57:11,702 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 18:57:39,593 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=4c81aeab21ef9c3e/4c81aeab21ef9c3e, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@4f7c2699, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:57:39,594 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:57:39,594 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:57:56,633 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onNext(User(employeeId=100060, email=amirtha1994@gmail.com, mobileNo=1234567892, empName=Mano123, username=Mano, password=kZf6KTTOk00mPkKRkkxMj9tTKoMrmhsE1GW0wBJfsOk=, enabled=false, role=participant, roles=null))
2020-05-01 18:57:56,705 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onComplete()
2020-05-01 18:58:17,289 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=d1582958e0a4f651/d1582958e0a4f651, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@4b329d54, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:58:17,289 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:58:17,290 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:58:17,298 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onNext(User(employeeId=100060, email=amirtha1994@gmail.com, mobileNo=1234567892, empName=Mano123, username=Mano, password=kZf6KTTOk00mPkKRkkxMj9tTKoMrmhsE1GW0wBJfsOk=, enabled=false, role=participant, roles=null))
2020-05-01 18:58:17,301 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onComplete()
2020-05-01 18:58:20,017 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=adf7a7a2fcfee73a/adf7a7a2fcfee73a, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@46d8e441, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:58:20,017 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:58:20,017 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:58:20,023 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onNext(User(employeeId=100060, email=amirtha1994@gmail.com, mobileNo=1234567892, empName=Mano123, username=Mano, password=kZf6KTTOk00mPkKRkkxMj9tTKoMrmhsE1GW0wBJfsOk=, enabled=false, role=participant, roles=null))
2020-05-01 18:58:20,026 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onComplete()
2020-05-01 18:58:21,456 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=d3dfcdc3d1b9046c/d3dfcdc3d1b9046c, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1aa1ba2a, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:58:21,457 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:58:21,457 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:58:21,463 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onNext(User(employeeId=100060, email=amirtha1994@gmail.com, mobileNo=1234567892, empName=Mano123, username=Mano, password=kZf6KTTOk00mPkKRkkxMj9tTKoMrmhsE1GW0wBJfsOk=, enabled=false, role=participant, roles=null))
2020-05-01 18:58:21,465 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onComplete()
2020-05-01 18:58:53,790 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=21a3cce5102e6935/21a3cce5102e6935, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@3a90e86c, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:58:53,790 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:58:53,791 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:58:53,802 ERROR [reactor-http-nio-4] get UserInfo data [Loggers.java:314] | onError(org.springframework.web.reactive.function.client.WebClientResponseException$NotFound: 404 Not Found from GET http://localhost:8081/user/userInfo/admin)
2020-05-01 18:58:53,802 ERROR [reactor-http-nio-4] get UserInfo data [Loggers.java:319] 
org.springframework.web.reactive.function.client.WebClientResponseException$NotFound: 404 Not Found from GET http://localhost:8081/user/userInfo/admin
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:185)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 404 from GET http://localhost:8081/user/userInfo/admin [DefaultWebClient]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:185)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onComplete(FluxContextStart.java:122)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onComplete(FluxFilterFuseable.java:165)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1706)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:367)
		at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:363)
		at reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:412)
		at reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:585)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:90)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:58:53,806 ERROR [reactor-http-nio-4] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [fbd56437-6]  500 Server Error for HTTP POST "/login"
org.springframework.web.reactive.function.client.WebClientResponseException$NotFound: 404 Not Found from GET http://localhost:8081/user/userInfo/admin
	at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:185)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ 404 from GET http://localhost:8081/user/userInfo/admin [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.AuthenticationController#login(AuthRequest) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/login" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:185)
		at org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:209)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onComplete(FluxContextStart.java:122)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:144)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onComplete(FluxFilterFuseable.java:165)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1706)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:419)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:209)
		at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:367)
		at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:363)
		at reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:412)
		at reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:585)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:90)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:59:18,710 INFO [Thread-15] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 18:59:18,710 WARN [Thread-15] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588339758710, current=DOWN, previous=UP]
2020-05-01 18:59:18,711 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:59:18,717 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:59:22,747 INFO [Thread-15] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 18:59:25,755 INFO [Thread-15] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 18:59:25,760 INFO [Thread-15] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 18:59:25,780 INFO [Thread-15] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 18:59:26,363 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 18:59:26,580 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 18:59:26,589 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 8ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 18:59:26,661 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 18:59:26,677 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:59:26,680 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:59:26,680 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:59:26,682 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:59:26,683 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:59:26,684 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 18:59:26,730 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 18:59:26,738 INFO [cluster-ClusterId{value='5eac2436d9d6725424576fe1', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:3, serverValue:225}] to localhost:27017
2020-05-01 18:59:26,741 INFO [cluster-ClusterId{value='5eac2436d9d6725424576fe1', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=838900}
2020-05-01 18:59:26,742 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:59:26,770 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 18:59:26,790 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 18:59:26,950 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 18:59:26,950 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 18:59:27,699 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:59:27,713 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 18:59:27,884 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 18:59:27,886 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 18:59:27,887 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 18:59:27,887 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 18:59:27,887 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 18:59:27,887 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 18:59:27,981 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 18:59:27,982 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 18:59:27,982 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 18:59:27,982 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 18:59:27,982 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 18:59:27,982 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 18:59:27,983 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 18:59:27,983 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 18:59:27,986 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 18:59:27,987 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 18:59:27,987 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 18:59:27,988 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588339767988 with initial instances count: 3
2020-05-01 18:59:27,993 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 18:59:27,993 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588339767993, current=UP, previous=STARTING]
2020-05-01 18:59:27,994 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:59:27,998 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 18:59:28,003 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 18:59:28,004 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 18:59:28,332 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.35 seconds (JVM running for 363.893)
2020-05-01 18:59:28,334 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 18:59:31,936 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=278ae294b9afcf7b/278ae294b9afcf7b, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@2f184bdf, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 18:59:31,937 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 18:59:31,937 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 18:59:31,953 ERROR [reactor-http-nio-4] get UserInfo data [Loggers.java:314] | onError(java.net.UnknownHostException: fms-events)
2020-05-01 18:59:31,953 ERROR [reactor-http-nio-4] get UserInfo data [Loggers.java:319] 
java.net.UnknownHostException: fms-events
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Request to GET http://fms-events/user/userInfo/Mano [DefaultWebClient]
Stack trace:
		at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
		at java.net.InetAddress$2.lookupAllHostAddr(Unknown Source)
		at java.net.InetAddress.getAddressesFromNameService(Unknown Source)
		at java.net.InetAddress.getAllByName0(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getByName(Unknown Source)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:156)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:153)
		at java.security.AccessController.doPrivileged(Native Method)
		at io.netty.util.internal.SocketUtils.addressByName(SocketUtils.java:153)
		at io.netty.resolver.DefaultNameResolver.doResolve(DefaultNameResolver.java:41)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:61)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:53)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:55)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:31)
		at io.netty.resolver.AbstractAddressResolver.resolve(AbstractAddressResolver.java:106)
		at io.netty.bootstrap.Bootstrap.doResolveAndConnect0(Bootstrap.java:200)
		at io.netty.bootstrap.Bootstrap.access$000(Bootstrap.java:46)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:180)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:166)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:551)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:604)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)
		at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:84)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetSuccess(AbstractChannel.java:984)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:504)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.access$200(AbstractChannel.java:417)
		at io.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:474)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:59:31,954 ERROR [reactor-http-nio-4] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [6e70ac6b-7]  500 Server Error for HTTP POST "/login"
java.net.UnknownHostException: fms-events
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Request to GET http://fms-events/user/userInfo/Mano [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.AuthenticationController#login(AuthRequest) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP POST "/login" [ExceptionHandlingWebHandler]
Stack trace:
		at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
		at java.net.InetAddress$2.lookupAllHostAddr(Unknown Source)
		at java.net.InetAddress.getAddressesFromNameService(Unknown Source)
		at java.net.InetAddress.getAllByName0(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getByName(Unknown Source)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:156)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:153)
		at java.security.AccessController.doPrivileged(Native Method)
		at io.netty.util.internal.SocketUtils.addressByName(SocketUtils.java:153)
		at io.netty.resolver.DefaultNameResolver.doResolve(DefaultNameResolver.java:41)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:61)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:53)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:55)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:31)
		at io.netty.resolver.AbstractAddressResolver.resolve(AbstractAddressResolver.java:106)
		at io.netty.bootstrap.Bootstrap.doResolveAndConnect0(Bootstrap.java:200)
		at io.netty.bootstrap.Bootstrap.access$000(Bootstrap.java:46)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:180)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:166)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:551)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:604)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)
		at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:84)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetSuccess(AbstractChannel.java:984)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:504)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.access$200(AbstractChannel.java:417)
		at io.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:474)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 18:59:59,682 INFO [Thread-27] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 18:59:59,683 WARN [Thread-27] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588339799683, current=DOWN, previous=UP]
2020-05-01 18:59:59,683 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 18:59:59,688 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:00:03,822 INFO [Thread-27] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 19:00:06,832 INFO [Thread-27] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 19:00:06,836 INFO [Thread-27] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 19:00:06,842 INFO [Thread-27] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 19:00:07,399 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 19:00:07,609 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 19:00:07,619 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 9ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 19:00:07,689 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 19:00:07,706 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:00:07,708 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:00:07,709 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:00:07,710 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:00:07,711 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:00:07,711 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:00:07,759 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 19:00:07,767 INFO [cluster-ClusterId{value='5eac245fd9d6725424576fe2', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:4, serverValue:226}] to localhost:27017
2020-05-01 19:00:07,769 INFO [cluster-ClusterId{value='5eac245fd9d6725424576fe2', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=811100}
2020-05-01 19:00:07,771 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:00:07,803 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 19:00:07,821 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:00:07,955 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:00:07,955 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:00:08,668 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:00:08,681 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:00:08,852 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 19:00:08,854 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 19:00:08,855 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 19:00:08,855 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 19:00:08,856 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 19:00:08,856 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 19:00:08,945 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:00:08,948 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:00:08,948 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:00:08,948 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:00:08,948 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:00:08,948 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:00:08,948 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:00:08,949 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:00:08,952 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 19:00:08,953 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 19:00:08,953 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 19:00:08,954 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588339808954 with initial instances count: 3
2020-05-01 19:00:08,959 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 19:00:08,959 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588339808959, current=UP, previous=STARTING]
2020-05-01 19:00:08,960 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:00:08,965 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:00:08,969 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 19:00:08,970 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 19:00:09,266 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.236 seconds (JVM running for 404.828)
2020-05-01 19:00:09,268 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 19:00:13,792 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=acc74c2e41b4d10d/acc74c2e41b4d10d, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@706990fb, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 19:00:13,793 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:00:13,793 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 19:00:13,807 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onNext(User(employeeId=100060, email=amirtha1994@gmail.com, mobileNo=1234567892, empName=Mano123, username=Mano, password=kZf6KTTOk00mPkKRkkxMj9tTKoMrmhsE1GW0wBJfsOk=, enabled=false, role=participant, roles=null))
2020-05-01 19:00:13,812 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onComplete()
2020-05-01 19:01:46,022 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=08e634d214a1cbe8/08e634d214a1cbe8, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@70497162, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 19:01:46,023 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:01:46,023 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 19:01:46,156 INFO [reactor-http-nio-3] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:01:46,186 INFO [reactor-http-nio-3] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:58] Shutdown hook installed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 19:01:46,187 INFO [reactor-http-nio-3] c.n.l.BaseLoadBalancer [BaseLoadBalancer.java:197] Client: fms-events instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-05-01 19:01:46,193 INFO [reactor-http-nio-3] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:222] Using serverListUpdater PollingServerListUpdater
2020-05-01 19:01:46,215 INFO [reactor-http-nio-3] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:01:46,217 INFO [reactor-http-nio-3] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:150] DynamicServerListLoadBalancer for client fms-events initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[DESKTOP-1QKKEMV:8081],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:DESKTOP-1QKKEMV:8081;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 05:30:00 IST 1970;	First connection made: Thu Jan 01 05:30:00 IST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@41f3794d
2020-05-01 19:01:46,399 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 19:01:46,402 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 19:01:47,199 INFO [PollingServerListUpdater-0] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:02:15,568 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=988a9c56d3ca4fa5/988a9c56d3ca4fa5, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1230980d, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 19:02:15,569 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:02:15,569 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 19:02:15,576 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 19:02:15,577 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 19:03:27,248 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=4c1abcda7c3b13d8/4c1abcda7c3b13d8, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@3dfd7a58, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 19:03:27,249 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:03:27,250 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 19:04:01,925 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 19:04:01,926 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 19:04:33,601 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=369e3fe453695ffa/369e3fe453695ffa, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@43334d92, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 19:04:33,601 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:04:33,601 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 19:04:33,613 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 19:04:33,614 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 19:05:03,141 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=72888bec92f98551/72888bec92f98551, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@50407362, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 19:05:03,141 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:05:03,141 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 19:05:03,150 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 19:05:03,150 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 19:05:08,951 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:05:57,684 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=b2ed731c5027beee/b2ed731c5027beee, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@2e44bdee, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 19:05:57,685 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:05:57,685 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 19:05:57,692 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 19:05:57,692 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 19:06:43,756 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=ecf594f67eee13ec/ecf594f67eee13ec, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@3b98b87e, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 19:06:43,756 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:06:43,756 INFO [reactor-http-nio-3] get UserInfo data [Loggers.java:274] | request(unbounded)
2020-05-01 19:06:43,764 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onNext(User(employeeId=10011, email=amirtha1994@gmail.com, mobileNo=1234567892, empName=Sabari, username=Sabari123, password=eNcrqPPPlZL2cM+KOm0udkQ1TvJ6Bzk2hxx1dfX6rkk=, enabled=false, role=admin, roles=null))
2020-05-01 19:06:43,766 INFO [reactor-http-nio-4] get UserInfo data [Loggers.java:274] | onComplete()
2020-05-01 19:09:56,130 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=6c1d21f61a12d6eb/6c1d21f61a12d6eb, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@7f3ef87c, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 19:09:56,130 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:09:56,131 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 19:09:56,137 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 19:09:56,138 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 19:10:08,953 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:11:03,411 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=610f3ba626ebc2d7/610f3ba626ebc2d7, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@71ef6924, interface org.springframework.security.core.context.SecurityContext=MonoEmpty})
2020-05-01 19:11:03,411 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:11:03,412 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | request(unbounded)
2020-05-01 19:11:03,419 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onNext(Data Saved Successfully!)
2020-05-01 19:11:03,419 INFO [reactor-http-nio-3] Post User info data [Loggers.java:274] | onComplete()
2020-05-01 19:15:08,954 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:20:08,957 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:21:49,345 ERROR [reactor-http-nio-1] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [18821f0f-19]  500 Server Error for HTTP PUT "/userInfo/addpmo/100058"
java.net.UnknownHostException: fms-events
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Request to PUT http://fms-events/user/userInfo/changerole/100058/pmo [DefaultWebClient]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.UserInfoController#addPmoRole(String) [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP PUT "/userInfo/addpmo/100058" [ExceptionHandlingWebHandler]
Stack trace:
		at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
		at java.net.InetAddress$2.lookupAllHostAddr(Unknown Source)
		at java.net.InetAddress.getAddressesFromNameService(Unknown Source)
		at java.net.InetAddress.getAllByName0(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getAllByName(Unknown Source)
		at java.net.InetAddress.getByName(Unknown Source)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:156)
		at io.netty.util.internal.SocketUtils$8.run(SocketUtils.java:153)
		at java.security.AccessController.doPrivileged(Native Method)
		at io.netty.util.internal.SocketUtils.addressByName(SocketUtils.java:153)
		at io.netty.resolver.DefaultNameResolver.doResolve(DefaultNameResolver.java:41)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:61)
		at io.netty.resolver.SimpleNameResolver.resolve(SimpleNameResolver.java:53)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:55)
		at io.netty.resolver.InetSocketAddressResolver.doResolve(InetSocketAddressResolver.java:31)
		at io.netty.resolver.AbstractAddressResolver.resolve(AbstractAddressResolver.java:106)
		at io.netty.bootstrap.Bootstrap.doResolveAndConnect0(Bootstrap.java:200)
		at io.netty.bootstrap.Bootstrap.access$000(Bootstrap.java:46)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:180)
		at io.netty.bootstrap.Bootstrap$1.operationComplete(Bootstrap.java:166)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:551)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:604)
		at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)
		at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:84)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetSuccess(AbstractChannel.java:984)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:504)
		at io.netty.channel.AbstractChannel$AbstractUnsafe.access$200(AbstractChannel.java:417)
		at io.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:474)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 19:22:23,459 INFO [Thread-39] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 19:22:23,460 WARN [Thread-39] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588341143460, current=DOWN, previous=UP]
2020-05-01 19:22:23,461 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:22:23,464 INFO [Thread-39] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:67] Shutdown hook removed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 19:22:23,467 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:22:27,518 INFO [Thread-39] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 19:22:30,524 INFO [Thread-39] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 19:22:30,542 INFO [Thread-39] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 19:22:30,552 INFO [Thread-39] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 19:22:31,175 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 19:22:31,435 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 19:22:31,443 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 8ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 19:22:31,533 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 19:22:31,550 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:22:31,553 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:22:31,553 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:22:31,554 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:22:31,555 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:22:31,556 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:22:31,605 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 19:22:31,614 INFO [cluster-ClusterId{value='5eac299fd9d6725424576fe3', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:5, serverValue:231}] to localhost:27017
2020-05-01 19:22:31,616 INFO [cluster-ClusterId{value='5eac299fd9d6725424576fe3', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=924800}
2020-05-01 19:22:31,618 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:22:31,651 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 19:22:31,669 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:22:31,810 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:22:31,810 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:22:32,570 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:22:32,582 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:22:32,761 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 19:22:32,763 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 19:22:32,764 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 19:22:32,764 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 19:22:32,764 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 19:22:32,765 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 19:22:32,854 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:22:32,855 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:22:32,855 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:22:32,855 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:22:32,855 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:22:32,855 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:22:32,855 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:22:32,856 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:22:32,859 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 19:22:32,860 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 19:22:32,860 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 19:22:32,861 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588341152861 with initial instances count: 3
2020-05-01 19:22:32,866 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 19:22:32,866 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588341152866, current=UP, previous=STARTING]
2020-05-01 19:22:32,866 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:22:32,870 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:22:32,876 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 19:22:32,876 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 19:22:33,172 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.372 seconds (JVM running for 1748.733)
2020-05-01 19:22:33,173 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 19:24:18,518 INFO [boundedElastic-4] Dashboard data [Loggers.java:274] onContextUpdate(Context3{class brave.propagation.TraceContext=cdd98d521ab55829/cdd98d521ab55829, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@166525a, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 19:24:18,553 INFO [boundedElastic-4] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:24:18,555 INFO [boundedElastic-4] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:58] Shutdown hook installed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 19:24:18,556 INFO [boundedElastic-4] c.n.l.BaseLoadBalancer [BaseLoadBalancer.java:197] Client: fms-events instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-05-01 19:24:18,557 INFO [boundedElastic-4] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:222] Using serverListUpdater PollingServerListUpdater
2020-05-01 19:24:18,559 INFO [boundedElastic-4] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:24:18,560 INFO [boundedElastic-4] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:150] DynamicServerListLoadBalancer for client fms-events initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[DESKTOP-1QKKEMV:8081],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:DESKTOP-1QKKEMV:8081;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 05:30:00 IST 1970;	First connection made: Thu Jan 01 05:30:00 IST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@487cc53e
2020-05-01 19:24:18,565 INFO [boundedElastic-4] Dashboard data [Loggers.java:274] onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:24:18,566 INFO [boundedElastic-4] Dashboard data [Loggers.java:274] request(unbounded)
2020-05-01 19:24:18,715 INFO [reactor-http-nio-4] Dashboard data [Loggers.java:274] onNext(Dashboard(totalevents=8, totalVolunteersCount=56, totalLivesImpacted=877, totalParticipants=56))
2020-05-01 19:24:18,715 INFO [reactor-http-nio-4] Dashboard data [Loggers.java:274] onComplete()
2020-05-01 19:24:19,561 INFO [PollingServerListUpdater-0] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:24:43,554 INFO [boundedElastic-4] Events data [Loggers.java:274] onContextUpdate(Context3{class brave.propagation.TraceContext=859cae9b8018b386/859cae9b8018b386, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@337bb9c, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 19:24:43,555 INFO [boundedElastic-4] Events data [Loggers.java:274] onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:24:43,556 INFO [boundedElastic-4] Events data [Loggers.java:274] request(unbounded)
2020-05-01 19:24:43,589 ERROR [reactor-http-nio-4] Events data [Loggers.java:314] onError(org.springframework.core.codec.DecodingException: Invalid JSON input: Cannot deserialize value of type `int` from String "9457318904": Overflow: numeric value (9457318904) out of range of Integer (-2147483648 - 2147483647); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `int` from String "9457318904": Overflow: numeric value (9457318904) out of range of Integer (-2147483648 - 2147483647)
 at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fms.fmsevent.model.Events["pocDetail"]->com.fms.fmsevent.model.pocDetails["pocNumber"]))
2020-05-01 19:24:43,590 ERROR [reactor-http-nio-4] Events data [Loggers.java:319] 
org.springframework.core.codec.DecodingException: Invalid JSON input: Cannot deserialize value of type `int` from String "9457318904": Overflow: numeric value (9457318904) out of range of Integer (-2147483648 - 2147483647); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `int` from String "9457318904": Overflow: numeric value (9457318904) out of range of Integer (-2147483648 - 2147483647)
 at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fms.fmsevent.model.Events["pocDetail"]->com.fms.fmsevent.model.pocDetails["pocNumber"])
	at org.springframework.http.codec.json.AbstractJackson2Decoder.processException(AbstractJackson2Decoder.java:213)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Body from  [DefaultClientResponse]
Stack trace:
		at org.springframework.http.codec.json.AbstractJackson2Decoder.processException(AbstractJackson2Decoder.java:213)
		at org.springframework.http.codec.json.AbstractJackson2Decoder.lambda$decode$0(AbstractJackson2Decoder.java:134)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:96)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:176)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.drainAsync(FluxFlattenIterable.java:423)
		at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.drain(FluxFlattenIterable.java:685)
		at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.onNext(FluxFlattenIterable.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:114)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:114)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:218)
		at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:351)
		at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:348)
		at reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:601)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:90)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
Caused by: com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `int` from String "9457318904": Overflow: numeric value (9457318904) out of range of Integer (-2147483648 - 2147483647)
 at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fms.fmsevent.model.Events["pocDetail"]->com.fms.fmsevent.model.pocDetails["pocNumber"])
	at com.fasterxml.jackson.databind.exc.InvalidFormatException.from(InvalidFormatException.java:67)
	at com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(DeserializationContext.java:1679)
	at com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue(DeserializationContext.java:935)
	at com.fasterxml.jackson.databind.deser.std.NumberDeserializers$IntegerDeserializer._parseInteger(NumberDeserializers.java:514)
	at com.fasterxml.jackson.databind.deser.std.NumberDeserializers$IntegerDeserializer.deserialize(NumberDeserializers.java:474)
	at com.fasterxml.jackson.databind.deser.std.NumberDeserializers$IntegerDeserializer.deserialize(NumberDeserializers.java:452)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:369)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:369)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159)
	at com.fasterxml.jackson.databind.ObjectReader._bind(ObjectReader.java:1682)
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:977)
	at org.springframework.http.codec.json.AbstractJackson2Decoder.lambda$decode$0(AbstractJackson2Decoder.java:127)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:96)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:176)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.drainAsync(FluxFlattenIterable.java:423)
	at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.drain(FluxFlattenIterable.java:685)
	at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.onNext(FluxFlattenIterable.java:252)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:385)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:114)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:114)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:218)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:351)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:348)
	at reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:601)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:90)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
2020-05-01 19:24:43,593 ERROR [reactor-http-nio-4] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [b668f452-23]  500 Server Error for HTTP GET "/getEvents"
org.springframework.core.codec.DecodingException: Invalid JSON input: Cannot deserialize value of type `int` from String "9457318904": Overflow: numeric value (9457318904) out of range of Integer (-2147483648 - 2147483647); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `int` from String "9457318904": Overflow: numeric value (9457318904) out of range of Integer (-2147483648 - 2147483647)
 at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fms.fmsevent.model.Events["pocDetail"]->com.fms.fmsevent.model.pocDetails["pocNumber"])
	at org.springframework.http.codec.json.AbstractJackson2Decoder.processException(AbstractJackson2Decoder.java:213)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Body from  [DefaultClientResponse]
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.DashboardController#fetchAllEvents() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/getEvents" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.http.codec.json.AbstractJackson2Decoder.processException(AbstractJackson2Decoder.java:213)
		at org.springframework.http.codec.json.AbstractJackson2Decoder.lambda$decode$0(AbstractJackson2Decoder.java:134)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:96)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:176)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.drainAsync(FluxFlattenIterable.java:423)
		at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.drain(FluxFlattenIterable.java:685)
		at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.onNext(FluxFlattenIterable.java:252)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:114)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:114)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:218)
		at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:351)
		at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:348)
		at reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:601)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:90)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Unknown Source)
Caused by: com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `int` from String "9457318904": Overflow: numeric value (9457318904) out of range of Integer (-2147483648 - 2147483647)
 at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fms.fmsevent.model.Events["pocDetail"]->com.fms.fmsevent.model.pocDetails["pocNumber"])
	at com.fasterxml.jackson.databind.exc.InvalidFormatException.from(InvalidFormatException.java:67)
	at com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(DeserializationContext.java:1679)
	at com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue(DeserializationContext.java:935)
	at com.fasterxml.jackson.databind.deser.std.NumberDeserializers$IntegerDeserializer._parseInteger(NumberDeserializers.java:514)
	at com.fasterxml.jackson.databind.deser.std.NumberDeserializers$IntegerDeserializer.deserialize(NumberDeserializers.java:474)
	at com.fasterxml.jackson.databind.deser.std.NumberDeserializers$IntegerDeserializer.deserialize(NumberDeserializers.java:452)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:369)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:369)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159)
	at com.fasterxml.jackson.databind.ObjectReader._bind(ObjectReader.java:1682)
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:977)
	at org.springframework.http.codec.json.AbstractJackson2Decoder.lambda$decode$0(AbstractJackson2Decoder.java:127)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:96)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:176)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.drainAsync(FluxFlattenIterable.java:423)
	at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.drain(FluxFlattenIterable.java:685)
	at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.onNext(FluxFlattenIterable.java:252)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:385)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:114)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
	at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:114)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:218)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:351)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:348)
	at reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:601)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:90)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Unknown Source)
2020-05-01 19:27:16,348 INFO [Thread-55] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 19:27:16,349 WARN [Thread-55] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588341436349, current=DOWN, previous=UP]
2020-05-01 19:27:16,349 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:27:16,352 INFO [Thread-55] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:67] Shutdown hook removed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 19:27:16,355 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:27:21,726 INFO [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor [DeferredLog.java:225] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-01 19:27:22,126 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 19:27:22,576 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 19:27:22,627 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 48ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 19:27:22,890 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 19:27:23,082 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:27:23,092 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:27:23,094 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:27:23,098 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:27:23,099 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:27:23,102 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:27:23,334 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 19:27:23,429 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:27:23,524 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 19:27:23,638 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:27:23,704 INFO [cluster-ClusterId{value='5eac2ac3c8fcc5579eaf03cc', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:1, serverValue:235}] to localhost:27017
2020-05-01 19:27:23,708 INFO [cluster-ClusterId{value='5eac2ac3c8fcc5579eaf03cc', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=3105400}
2020-05-01 19:27:24,028 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:27:24,028 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:27:24,031 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:27:24,032 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:27:24,979 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:27:24,996 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:27:25,340 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 19:27:25,373 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 19:27:25,666 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 19:27:25,667 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 19:27:25,751 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 19:27:25,751 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 19:27:25,934 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:27:26,067 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:27:26,068 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:27:26,068 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:27:26,068 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:27:26,068 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:27:26,068 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:27:26,068 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:27:26,191 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 19:27:26,194 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 19:27:26,196 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 19:27:26,200 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588341446199 with initial instances count: 3
2020-05-01 19:27:26,206 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 19:27:26,207 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588341446206, current=UP, previous=STARTING]
2020-05-01 19:27:26,209 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:27:26,241 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:27:26,251 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 19:27:26,253 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 19:27:26,597 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 5.349 seconds (JVM running for 6.212)
2020-05-01 19:27:29,636 INFO [boundedElastic-1] Events data [Loggers.java:274] onContextUpdate(Context3{class brave.propagation.TraceContext=14201e2809103390/14201e2809103390, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@570348ce, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 19:27:29,771 INFO [boundedElastic-1] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:27:29,801 INFO [boundedElastic-1] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:58] Shutdown hook installed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 19:27:29,802 INFO [boundedElastic-1] c.n.l.BaseLoadBalancer [BaseLoadBalancer.java:197] Client: fms-events instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-05-01 19:27:29,808 INFO [boundedElastic-1] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:222] Using serverListUpdater PollingServerListUpdater
2020-05-01 19:27:29,832 INFO [boundedElastic-1] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:27:29,834 INFO [boundedElastic-1] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:150] DynamicServerListLoadBalancer for client fms-events initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[DESKTOP-1QKKEMV:8081],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:DESKTOP-1QKKEMV:8081;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 05:30:00 IST 1970;	First connection made: Thu Jan 01 05:30:00 IST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@240548fa
2020-05-01 19:27:29,851 INFO [boundedElastic-1] Events data [Loggers.java:274] onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:27:29,851 INFO [boundedElastic-1] Events data [Loggers.java:274] request(unbounded)
2020-05-01 19:27:29,934 INFO [reactor-http-nio-4] Events data [Loggers.java:274] onNext(Events(eventId=EVNT00047261, month=DEC, venueAddress=705, Serangoon Road, Singapore, Singapore, Singapore-328127, project=Donation or Distribution, eventDate=2018-12-15, totalVolunteers=21.0, totalVolunteersHours=88.0, totalTravelHours=42.0, livesImpacted=800.0, overallVolunteerHours=130.0, activityType=1.0, status=Approved, pocDetail=pocDetails(pocId=468901, pocName=Shanmugam, pocNumber=9457318904)))
2020-05-01 19:27:29,935 INFO [reactor-http-nio-4] Events data [Loggers.java:274] onNext(Events(eventId=EVNT00046103, month=DEC, venueAddress=Gandhi Rd, Ranganathapuram, Tambaram, Tambaram, , , India-600045, project=Be a Teacher, eventDate=2018-12-01, totalVolunteers=14.0, totalVolunteersHours=28.0, totalTravelHours=14.0, livesImpacted=30.0, overallVolunteerHours=42.0, activityType=3.0, status=Approved, pocDetail=pocDetails(pocId=468902, pocName=Subramani, pocNumber=9562751455)))
2020-05-01 19:27:29,936 INFO [reactor-http-nio-4] Events data [Loggers.java:274] onNext(Events(eventId=EVNT00046385, month=DEC, venueAddress=Havering Drive, Havering Drive, , , Romford-RM1 4BT, project=Community Program, eventDate=2018-12-01, totalVolunteers=4.0, totalVolunteersHours=24.0, totalTravelHours=0.0, livesImpacted=0.0, overallVolunteerHours=24.0, activityType=3.0, status=Approved, pocDetail=pocDetails(pocId=468903, pocName=Abirami, pocNumber=9873155667)))
2020-05-01 19:27:29,937 INFO [reactor-http-nio-4] Events data [Loggers.java:274] onNext(Events(eventId=EVNT00046530, month=DEC, venueAddress=Krantiveer Chapekar Smarak Samitee, Opposite Ram Mandir, Chinchwad Gaon, Pune, Maharashtra, India-411033, project=Be a Teacher, eventDate=2018-12-01, totalVolunteers=2.0, totalVolunteersHours=5.0, totalTravelHours=0.0, livesImpacted=20.0, overallVolunteerHours=5.0, activityType=4.0, status=Approved, pocDetail=pocDetails(pocId=468904, pocName=John, pocNumber=9834345676)))
2020-05-01 19:27:29,937 INFO [reactor-http-nio-4] Events data [Loggers.java:274] onNext(Events(eventId=EVNT00046531, month=DEC, venueAddress=Krantiveer Chapekar Smarak Samitee, Opposite Ram Mandir, Chinchwad Gaon, Pune, Maharashtra, India-411033, project=Be a Teacher, eventDate=2018-12-08, totalVolunteers=2.0, totalVolunteersHours=4.0, totalTravelHours=0.0, livesImpacted=2.0, overallVolunteerHours=4.0, activityType=4.0, status=Approved, pocDetail=pocDetails(pocId=468905, pocName=Andres, pocNumber=9712231256)))
2020-05-01 19:27:29,937 INFO [reactor-http-nio-4] Events data [Loggers.java:274] onNext(Events(eventId=EVNT00046588, month=DEC, venueAddress=Chitlapakkam, , , India-600064, project=Be a Teacher, eventDate=2018-12-03, totalVolunteers=2.0, totalVolunteersHours=4.0, totalTravelHours=0.0, livesImpacted=2.0, overallVolunteerHours=4.0, activityType=4.0, status=Approved, pocDetail=pocDetails(pocId=468906, pocName=Jessi, pocNumber=9767654312)))
2020-05-01 19:27:29,937 INFO [reactor-http-nio-4] Events data [Loggers.java:274] onNext(Events(eventId=EVNT00046611, month=DEC, venueAddress=Keeranatham Puthupalayam, Coimbatore, Tamil nadu, India-641035, project=Be a Teacher, eventDate=2018-12-13, totalVolunteers=5.0, totalVolunteersHours=10.0, totalTravelHours=2.5, livesImpacted=22.0, overallVolunteerHours=12.5, activityType=3.0, status=Approved, pocDetail=pocDetails(pocId=468907, pocName=Raina, pocNumber=9812878743)))
2020-05-01 19:27:29,938 INFO [reactor-http-nio-4] Events data [Loggers.java:274] onNext(Events(eventId=EVNT00047114, month=DEC, venueAddress=Amman Nagar, Trisulam, Chennai, Tamil Nadu, India-600043, project=Be a Teacher, eventDate=2018-12-04, totalVolunteers=6.0, totalVolunteersHours=0.6, totalTravelHours=9.0, livesImpacted=1.0, overallVolunteerHours=9.6, activityType=5.0, status=Approved, pocDetail=pocDetails(pocId=468902, pocName=Dhoni, pocNumber=9812006533)))
2020-05-01 19:27:29,938 INFO [reactor-http-nio-4] Events data [Loggers.java:274] onComplete()
2020-05-01 19:27:30,814 INFO [PollingServerListUpdater-0] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:29:15,351 INFO [Thread-3] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 19:29:15,352 WARN [Thread-3] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588341555352, current=DOWN, previous=UP]
2020-05-01 19:29:15,352 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:29:15,356 INFO [Thread-3] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:67] Shutdown hook removed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 19:29:15,357 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:29:19,513 INFO [Thread-3] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 19:29:22,518 INFO [Thread-3] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 19:29:22,522 INFO [Thread-3] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 19:29:22,536 INFO [Thread-3] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 19:29:23,124 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 19:29:23,339 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 19:29:23,349 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 9ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 19:29:23,425 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 19:29:23,441 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:29:23,444 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:29:23,445 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:29:23,447 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:29:23,448 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:29:23,448 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:29:23,497 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 19:29:23,506 INFO [cluster-ClusterId{value='5eac2b3bc8fcc5579eaf03cd', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:2, serverValue:236}] to localhost:27017
2020-05-01 19:29:23,511 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:29:23,512 INFO [cluster-ClusterId{value='5eac2b3bc8fcc5579eaf03cd', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=5428100}
2020-05-01 19:29:23,544 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 19:29:23,562 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:29:23,715 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:29:23,715 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:29:24,456 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:29:24,468 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:29:24,651 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 19:29:24,653 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 19:29:24,654 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 19:29:24,655 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 19:29:24,655 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 19:29:24,655 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 19:29:24,747 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:29:24,748 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:29:24,748 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:29:24,748 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:29:24,748 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:29:24,748 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:29:24,749 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:29:24,749 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:29:24,752 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 19:29:24,753 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 19:29:24,754 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 19:29:24,755 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588341564755 with initial instances count: 3
2020-05-01 19:29:24,759 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 19:29:24,760 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588341564760, current=UP, previous=STARTING]
2020-05-01 19:29:24,760 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:29:24,783 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:29:24,786 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 19:29:24,786 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 19:29:24,887 INFO [boundedElastic-2] Get data [Loggers.java:274] onContextUpdate(Context3{class brave.propagation.TraceContext=409e17abf76696f1/409e17abf76696f1, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@89cf1a4, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 19:29:24,922 INFO [boundedElastic-2] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:29:24,925 INFO [boundedElastic-2] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:58] Shutdown hook installed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 19:29:24,926 INFO [boundedElastic-2] c.n.l.BaseLoadBalancer [BaseLoadBalancer.java:197] Client: fms-events instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-05-01 19:29:24,930 INFO [boundedElastic-2] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:222] Using serverListUpdater PollingServerListUpdater
2020-05-01 19:29:24,933 INFO [boundedElastic-2] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:29:24,936 INFO [boundedElastic-2] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:150] DynamicServerListLoadBalancer for client fms-events initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[DESKTOP-1QKKEMV:8081],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:DESKTOP-1QKKEMV:8081;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 05:30:00 IST 1970;	First connection made: Thu Jan 01 05:30:00 IST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@5f0ca408
2020-05-01 19:29:24,947 INFO [boundedElastic-2] Get data [Loggers.java:274] onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:29:24,948 INFO [boundedElastic-2] Get data [Loggers.java:274] request(unbounded)
2020-05-01 19:29:24,982 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100001, employeeName=Sundar Pichai, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:29:24,983 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2019-12-15, employeeId=100002, employeeName=Arun Prasanth, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Field Marketing, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:29:24,984 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100003, employeeName=Balaji Reddy, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=APAC Leadership & Operations, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:29:24,984 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2019-12-15, employeeId=100004, employeeName=Chandru Mohan, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=CDB-AIA-BFS, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:29:24,984 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2020-12-15, employeeId=100005, employeeName=Damodaran, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:29:24,984 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2021-12-15, employeeId=100006, employeeName=EswaraMurthy, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=CDB-AIA-BAI-BIG Data, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:29:24,984 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100007, employeeName=Frank E Alamelu, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Corporate Communications, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:29:24,984 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100008, employeeName=GopalaKrishnan, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=EAS-IPM-CEP-DIGITAL, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:29:24,985 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100009, employeeName=IndraVadivelan, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=EAS-IPM-PEGA, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:29:24,985 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100010, employeeName=Javed Khan, volunteerHours=8.0, travelHours=2.0, livesImpacted=800.0, businessUnit=EAS-IPM-CEP-DIGITAL, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:29:24,985 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100011, employeeName=Karun Nair, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:29:24,985 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100012, employeeName=MuthuVel, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=EAS-IPM-CEP-DIGITAL, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:29:24,985 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100013, employeeName=Akilandeswari, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Recruitment, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:29:24,986 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100014, employeeName=Elakya Mohana Devi, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:29:24,987 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100015, employeeName=Abraham Lincoln, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:29:24,989 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100016, employeeName=Einsten, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=CIS EUC, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:29:24,989 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100017, employeeName=Balaji, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:29:24,989 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100018, employeeName=Ahmed Nuvaidh, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Testing-BFS Products, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:29:24,990 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100019, employeeName=Ahmed Nuvaidh, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Testing-BFS Products, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:29:24,990 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100020, employeeName=SheikFareith, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Cognizant Infra Services, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:29:24,990 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100021, employeeName=SheikFareith, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:29:24,990 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100022, employeeName=SheikFareith, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:29:24,990 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100023, employeeName=SheikFareith, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Intelligent Automation & Tech, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:29:24,991 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100024, employeeName=SheikFareith, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=AVM-AIA- DI, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:29:24,991 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100025, employeeName=Ram Kumar, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:29:24,992 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100026, employeeName=AravindRaj, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Digital Ops - F&A Delivery, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:29:24,992 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100027, employeeName=AravindRaj, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Cognizant Infra Services, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:29:24,992 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100028, employeeName=AravindRaj, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=QEA CRM, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:29:24,992 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100029, employeeName=AravindRaj, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=CDB-AIA-BAI-MDM, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:29:24,992 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100030, employeeName=AravindRaj, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=CDB-AIA-AIA, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:29:24,993 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100031, employeeName=Ramachandran, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Entry Level Trainees, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:29:24,993 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100032, employeeName=Ramachandran, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Entry Level Trainees, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:29:24,993 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100033, employeeName=Ramachandran, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Entry Level Trainees, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:29:24,993 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100034, employeeName=Ramachandran, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Entry Level Trainees, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:29:24,993 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100035, employeeName=Ramachandran, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Entry Level Trainees, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:29:24,993 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046385, baseLocation=United Kingdom, beneficiaryName=St. Edward’s CE Voluntary Aided Primary School, councilName=Outreach UK, eventName=1st Dec PM-Christmas fair to save a school swimming pool, eventDescription=The school is hosting a Christmas Fayre to raise money to refurbish their swimming pool that is used by the children in the local community. Volunteers needed to set up, run and pack up the stalls. Can make it a fun day with your family., eventDate=2018-12-01, employeeId=100036, employeeName=Fathima, volunteerHours=6.0, travelHours=0.0, livesImpacted=0.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:29:24,994 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046385, baseLocation=United Kingdom, beneficiaryName=St. Edward’s CE Voluntary Aided Primary School, councilName=Outreach UK, eventName=1st Dec PM-Christmas fair to save a school swimming pool, eventDescription=The school is hosting a Christmas Fayre to raise money to refurbish their swimming pool that is used by the children in the local community. Volunteers needed to set up, run and pack up the stalls. Can make it a fun day with your family., eventDate=2018-12-01, employeeId=100037, employeeName=Fathima, volunteerHours=6.0, travelHours=0.0, livesImpacted=0.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:29:24,994 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046385, baseLocation=United Kingdom, beneficiaryName=St. Edward’s CE Voluntary Aided Primary School, councilName=Outreach UK, eventName=1st Dec PM-Christmas fair to save a school swimming pool, eventDescription=The school is hosting a Christmas Fayre to raise money to refurbish their swimming pool that is used by the children in the local community. Volunteers needed to set up, run and pack up the stalls. Can make it a fun day with your family., eventDate=2018-12-01, employeeId=100038, employeeName=Fathima, volunteerHours=6.0, travelHours=0.0, livesImpacted=0.0, businessUnit=CIS CSI CPS, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:29:24,994 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046385, baseLocation=United Kingdom, beneficiaryName=St. Edward’s CE Voluntary Aided Primary School, councilName=Outreach UK, eventName=1st Dec PM-Christmas fair to save a school swimming pool, eventDescription=The school is hosting a Christmas Fayre to raise money to refurbish their swimming pool that is used by the children in the local community. Volunteers needed to set up, run and pack up the stalls. Can make it a fun day with your family., eventDate=2018-12-01, employeeId=100039, employeeName=SantoshKumar, volunteerHours=6.0, travelHours=0.0, livesImpacted=0.0, businessUnit=CBC Strategy & Transformation, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:29:24,995 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046530, baseLocation=Pune, beneficiaryName=Gurukulam, councilName=Pune QEA LBG Outreach, eventName=Improve in Co-ordination, eventDescription=There is a lack of co-ordination in between the students and no friendly relation to each other.  Through good talk, learning game we will improve co-ordination in between the students., eventDate=2018-12-01, employeeId=100040, employeeName=SantoshKumar, volunteerHours=3.0, travelHours=0.0, livesImpacted=20.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:29:24,995 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046530, baseLocation=Pune, beneficiaryName=Gurukulam, councilName=Pune QEA LBG Outreach, eventName=Improve in Co-ordination, eventDescription=There is a lack of co-ordination in between the students and no friendly relation to each other.  Through good talk, learning game we will improve co-ordination in between the students., eventDate=2018-12-01, employeeId=100041, employeeName=SantoshKumar, volunteerHours=2.0, travelHours=0.0, livesImpacted=20.0, businessUnit=CommsMedia, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:29:24,995 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046531, baseLocation=Pune, beneficiaryName=Gurukulam, councilName=Pune QEA LBG Outreach, eventName=Improve in Co-ordination, eventDescription=There is a lack of co-ordination in between the students and no friendly relation to each other.  Through good talk, learning game we will improve co-ordination in between the students., eventDate=2018-12-08, employeeId=100042, employeeName=Ajay Rathnam, volunteerHours=2.0, travelHours=0.0, livesImpacted=2.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:29:24,995 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046531, baseLocation=Pune, beneficiaryName=Gurukulam, councilName=Pune QEA LBG Outreach, eventName=Improve in Co-ordination, eventDescription=There is a lack of co-ordination in between the students and no friendly relation to each other.  Through good talk, learning game we will improve co-ordination in between the students., eventDate=2018-12-08, employeeId=100043, employeeName=Ajay Rathnam, volunteerHours=2.0, travelHours=0.0, livesImpacted=2.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:29:24,995 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046588, baseLocation=Chennai, beneficiaryName=ADW Primary school chitlapakkam, councilName=Chennai BPS Outreach, eventName=BAT, eventDescription=BAT, eventDate=2018-12-03, employeeId=100044, employeeName=Asif Kishore, volunteerHours=2.0, travelHours=0.0, livesImpacted=2.0, businessUnit=Digital Ops - F&A Delivery, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:29:24,995 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046588, baseLocation=Chennai, beneficiaryName=ADW Primary school chitlapakkam, councilName=Chennai BPS Outreach, eventName=BAT, eventDescription=BAT, eventDate=2018-12-03, employeeId=100045, employeeName=Asif Kishore, volunteerHours=2.0, travelHours=0.0, livesImpacted=2.0, businessUnit=Cognizant Digital Operations, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:29:24,996 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046611, baseLocation=Coimbatore, beneficiaryName=Panchayat Union Primary School, Keeranatham Puthupalayam, councilName=Coimbatore Outreach, eventName=TEACHING, eventDescription=Teaches English Grammar, eventDate=2018-12-13, employeeId=100046, employeeName=Nilaveni Saranya , volunteerHours=2.0, travelHours=0.5, livesImpacted=22.0, businessUnit=AVM, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:29:24,996 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046611, baseLocation=Coimbatore, beneficiaryName=Panchayat Union Primary School, Keeranatham Puthupalayam, councilName=Coimbatore Outreach, eventName=TEACHING, eventDescription=Teaches English Grammar, eventDate=2018-12-13, employeeId=100047, employeeName=Nilaveni Saranya, volunteerHours=2.0, travelHours=0.5, livesImpacted=22.0, businessUnit=CDB-AIA-IMS-AISQuAD, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:29:24,996 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046611, baseLocation=Coimbatore, beneficiaryName=Panchayat Union Primary School, Keeranatham Puthupalayam, councilName=Coimbatore Outreach, eventName=TEACHING, eventDescription=Teaches English Grammar, eventDate=2018-12-13, employeeId=100048, employeeName=Tirumeni Sugumar, volunteerHours=2.0, travelHours=0.5, livesImpacted=22.0, businessUnit=CDB-AIA-IMS-AISQuAD, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:29:24,996 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046611, baseLocation=Coimbatore, beneficiaryName=Panchayat Union Primary School, Keeranatham Puthupalayam, councilName=Coimbatore Outreach, eventName=TEACHING, eventDescription=Teaches English Grammar, eventDate=2018-12-13, employeeId=100049, employeeName=Tirumeni Sugumar, volunteerHours=2.0, travelHours=0.5, livesImpacted=22.0, businessUnit=CDB-AIA-IMS-AISQuAD, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:29:24,996 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046611, baseLocation=Coimbatore, beneficiaryName=Panchayat Union Primary School, Keeranatham Puthupalayam, councilName=Coimbatore Outreach, eventName=TEACHING, eventDescription=Teaches English Grammar, eventDate=2018-12-13, employeeId=100050, employeeName=Tirumeni Sugumar, volunteerHours=2.0, travelHours=0.5, livesImpacted=22.0, businessUnit=CDB-AIA-IMS-AISQuAD, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:29:24,996 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100051, employeeName=Tirumeni Sugumar, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=AVM, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:29:24,997 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100052, employeeName=Prasanna K Selvi, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=AVM-AIA- DI, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:29:24,997 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100053, employeeName=Prasanna K Selvi, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=CIS DCO, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:29:24,997 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100054, employeeName=AkashayaDevi, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=CDB-AIA-IMS-BI, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:29:24,997 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100055, employeeName=Sonudarya, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=RCGTH-Retail & Consumer Goods, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:29:24,997 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100056, employeeName=Eswar J Dhivya, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=AVM-AIA- DI, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:29:24,998 INFO [reactor-http-nio-3] Get data [Loggers.java:274] onComplete()
2020-05-01 19:29:25,176 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.453 seconds (JVM running for 124.79)
2020-05-01 19:29:25,178 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 19:29:25,933 INFO [PollingServerListUpdater-0] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:31:02,715 INFO [reactor-http-nio-2] post data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=e9fc61b75b42ef9a/e9fc61b75b42ef9a, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6c11fe9b, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 19:31:02,715 INFO [reactor-http-nio-2] post data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:31:02,716 INFO [reactor-http-nio-2] post data [Loggers.java:274] | request(unbounded)
2020-05-01 19:31:02,779 INFO [reactor-http-nio-3] post data [Loggers.java:274] | onNext(EventDetail(id=null, eventId=EVNT000472612, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100001, employeeName=Sundar Pichai, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:31:02,779 INFO [reactor-http-nio-3] post data [Loggers.java:274] | onComplete()
2020-05-01 19:32:38,577 INFO [Thread-20] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 19:32:38,579 WARN [Thread-20] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588341758579, current=DOWN, previous=UP]
2020-05-01 19:32:38,580 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:32:38,584 INFO [Thread-20] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:67] Shutdown hook removed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 19:32:38,588 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:32:42,638 INFO [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor [DeferredLog.java:225] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-01 19:32:43,027 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 19:32:43,541 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 19:32:43,593 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 49ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 19:32:43,858 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 19:32:44,055 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:32:44,066 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:32:44,067 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:32:44,073 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:32:44,076 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:32:44,079 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:32:44,314 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 19:32:44,408 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:32:44,507 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 19:32:44,628 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:32:44,687 INFO [cluster-ClusterId{value='5eac2c04f6d56c208df975d3', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:1, serverValue:237}] to localhost:27017
2020-05-01 19:32:44,692 INFO [cluster-ClusterId{value='5eac2c04f6d56c208df975d3', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=3358600}
2020-05-01 19:32:45,009 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:32:45,010 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:32:45,013 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:32:45,013 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:32:45,953 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:32:45,976 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:32:46,309 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 19:32:46,336 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 19:32:46,626 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 19:32:46,626 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 19:32:46,710 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 19:32:46,710 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 19:32:46,884 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:32:47,010 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:32:47,011 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:32:47,011 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:32:47,011 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:32:47,011 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:32:47,011 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:32:47,012 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:32:47,134 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 19:32:47,137 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 19:32:47,140 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 19:32:47,144 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588341767143 with initial instances count: 3
2020-05-01 19:32:47,149 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 19:32:47,149 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588341767149, current=UP, previous=STARTING]
2020-05-01 19:32:47,151 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:32:47,183 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:32:47,193 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 19:32:47,194 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 19:32:47,523 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 5.36 seconds (JVM running for 6.175)
2020-05-01 19:34:19,898 INFO [boundedElastic-1] Get data [Loggers.java:274] onContextUpdate(Context3{class brave.propagation.TraceContext=5a0ea83bfde8ec1d/5a0ea83bfde8ec1d, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6877b220, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 19:34:20,014 INFO [boundedElastic-1] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:34:20,042 INFO [boundedElastic-1] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:58] Shutdown hook installed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 19:34:20,043 INFO [boundedElastic-1] c.n.l.BaseLoadBalancer [BaseLoadBalancer.java:197] Client: fms-events instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2020-05-01 19:34:20,049 INFO [boundedElastic-1] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:222] Using serverListUpdater PollingServerListUpdater
2020-05-01 19:34:20,071 INFO [boundedElastic-1] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:34:20,073 INFO [boundedElastic-1] c.n.l.DynamicServerListLoadBalancer [DynamicServerListLoadBalancer.java:150] DynamicServerListLoadBalancer for client fms-events initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=fms-events,current list of Servers=[DESKTOP-1QKKEMV:8081],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:DESKTOP-1QKKEMV:8081;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 05:30:00 IST 1970;	First connection made: Thu Jan 01 05:30:00 IST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@771d8dc5
2020-05-01 19:34:20,087 INFO [boundedElastic-1] Get data [Loggers.java:274] onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:34:20,088 INFO [boundedElastic-1] Get data [Loggers.java:274] request(unbounded)
2020-05-01 19:34:20,428 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100001, employeeName=Sundar Pichai, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:34:20,430 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2019-12-15, employeeId=100002, employeeName=Arun Prasanth, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Field Marketing, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:34:20,430 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100003, employeeName=Balaji Reddy, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=APAC Leadership & Operations, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:34:20,431 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2019-12-15, employeeId=100004, employeeName=Chandru Mohan, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=CDB-AIA-BFS, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:34:20,431 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2020-12-15, employeeId=100005, employeeName=Damodaran, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:34:20,431 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2021-12-15, employeeId=100006, employeeName=EswaraMurthy, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=CDB-AIA-BAI-BIG Data, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:34:20,431 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100007, employeeName=Frank E Alamelu, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Corporate Communications, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:34:20,432 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100008, employeeName=GopalaKrishnan, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=EAS-IPM-CEP-DIGITAL, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:34:20,432 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100009, employeeName=IndraVadivelan, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=EAS-IPM-PEGA, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:34:20,432 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100010, employeeName=Javed Khan, volunteerHours=8.0, travelHours=2.0, livesImpacted=800.0, businessUnit=EAS-IPM-CEP-DIGITAL, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:34:20,432 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100011, employeeName=Karun Nair, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:34:20,432 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100012, employeeName=MuthuVel, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=EAS-IPM-CEP-DIGITAL, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:34:20,433 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100013, employeeName=Akilandeswari, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Recruitment, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:34:20,434 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100014, employeeName=Elakya Mohana Devi, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:34:20,434 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100015, employeeName=Abraham Lincoln, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:34:20,437 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100016, employeeName=Einsten, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=CIS EUC, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:34:20,437 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100017, employeeName=Balaji, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:34:20,437 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100018, employeeName=Ahmed Nuvaidh, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Testing-BFS Products, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:34:20,438 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100019, employeeName=Ahmed Nuvaidh, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Testing-BFS Products, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:34:20,438 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100020, employeeName=SheikFareith, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Cognizant Infra Services, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:34:20,438 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047261, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100021, employeeName=SheikFareith, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:34:20,438 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100022, employeeName=SheikFareith, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:34:20,438 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100023, employeeName=SheikFareith, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Intelligent Automation & Tech, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:34:20,439 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100024, employeeName=SheikFareith, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=AVM-AIA- DI, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:34:20,439 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100025, employeeName=Ram Kumar, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:34:20,439 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100026, employeeName=AravindRaj, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Digital Ops - F&A Delivery, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:34:20,441 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100027, employeeName=AravindRaj, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Cognizant Infra Services, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:34:20,441 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100028, employeeName=AravindRaj, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=QEA CRM, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:34:20,441 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100029, employeeName=AravindRaj, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=CDB-AIA-BAI-MDM, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:34:20,441 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100030, employeeName=AravindRaj, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=CDB-AIA-AIA, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:34:20,442 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100031, employeeName=Ramachandran, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Entry Level Trainees, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:34:20,442 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100032, employeeName=Ramachandran, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Entry Level Trainees, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:34:20,442 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100033, employeeName=Ramachandran, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Entry Level Trainees, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:34:20,442 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100034, employeeName=Ramachandran, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Entry Level Trainees, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:34:20,442 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046103, baseLocation=Chennai, beneficiaryName=Kamarajar Illam,Tambaram, councilName=Chennai BFS Outreach, eventName=Be a Teacher @ Kamarajar Illam, eventDescription=Teach various subjects to the students in Kamarajar Illam, eventDate=2018-12-01, employeeId=100035, employeeName=Ramachandran, volunteerHours=2.0, travelHours=1.0, livesImpacted=30.0, businessUnit=Entry Level Trainees, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:34:20,442 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046385, baseLocation=United Kingdom, beneficiaryName=St. Edward’s CE Voluntary Aided Primary School, councilName=Outreach UK, eventName=1st Dec PM-Christmas fair to save a school swimming pool, eventDescription=The school is hosting a Christmas Fayre to raise money to refurbish their swimming pool that is used by the children in the local community. Volunteers needed to set up, run and pack up the stalls. Can make it a fun day with your family., eventDate=2018-12-01, employeeId=100036, employeeName=Fathima, volunteerHours=6.0, travelHours=0.0, livesImpacted=0.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:34:20,443 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046385, baseLocation=United Kingdom, beneficiaryName=St. Edward’s CE Voluntary Aided Primary School, councilName=Outreach UK, eventName=1st Dec PM-Christmas fair to save a school swimming pool, eventDescription=The school is hosting a Christmas Fayre to raise money to refurbish their swimming pool that is used by the children in the local community. Volunteers needed to set up, run and pack up the stalls. Can make it a fun day with your family., eventDate=2018-12-01, employeeId=100037, employeeName=Fathima, volunteerHours=6.0, travelHours=0.0, livesImpacted=0.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:34:20,443 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046385, baseLocation=United Kingdom, beneficiaryName=St. Edward’s CE Voluntary Aided Primary School, councilName=Outreach UK, eventName=1st Dec PM-Christmas fair to save a school swimming pool, eventDescription=The school is hosting a Christmas Fayre to raise money to refurbish their swimming pool that is used by the children in the local community. Volunteers needed to set up, run and pack up the stalls. Can make it a fun day with your family., eventDate=2018-12-01, employeeId=100038, employeeName=Fathima, volunteerHours=6.0, travelHours=0.0, livesImpacted=0.0, businessUnit=CIS CSI CPS, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:34:20,443 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046385, baseLocation=United Kingdom, beneficiaryName=St. Edward’s CE Voluntary Aided Primary School, councilName=Outreach UK, eventName=1st Dec PM-Christmas fair to save a school swimming pool, eventDescription=The school is hosting a Christmas Fayre to raise money to refurbish their swimming pool that is used by the children in the local community. Volunteers needed to set up, run and pack up the stalls. Can make it a fun day with your family., eventDate=2018-12-01, employeeId=100039, employeeName=SantoshKumar, volunteerHours=6.0, travelHours=0.0, livesImpacted=0.0, businessUnit=CBC Strategy & Transformation, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:34:20,443 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046530, baseLocation=Pune, beneficiaryName=Gurukulam, councilName=Pune QEA LBG Outreach, eventName=Improve in Co-ordination, eventDescription=There is a lack of co-ordination in between the students and no friendly relation to each other.  Through good talk, learning game we will improve co-ordination in between the students., eventDate=2018-12-01, employeeId=100040, employeeName=SantoshKumar, volunteerHours=3.0, travelHours=0.0, livesImpacted=20.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:34:20,444 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046530, baseLocation=Pune, beneficiaryName=Gurukulam, councilName=Pune QEA LBG Outreach, eventName=Improve in Co-ordination, eventDescription=There is a lack of co-ordination in between the students and no friendly relation to each other.  Through good talk, learning game we will improve co-ordination in between the students., eventDate=2018-12-01, employeeId=100041, employeeName=SantoshKumar, volunteerHours=2.0, travelHours=0.0, livesImpacted=20.0, businessUnit=CommsMedia, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:34:20,445 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046531, baseLocation=Pune, beneficiaryName=Gurukulam, councilName=Pune QEA LBG Outreach, eventName=Improve in Co-ordination, eventDescription=There is a lack of co-ordination in between the students and no friendly relation to each other.  Through good talk, learning game we will improve co-ordination in between the students., eventDate=2018-12-08, employeeId=100042, employeeName=Ajay Rathnam, volunteerHours=2.0, travelHours=0.0, livesImpacted=2.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:34:20,445 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046531, baseLocation=Pune, beneficiaryName=Gurukulam, councilName=Pune QEA LBG Outreach, eventName=Improve in Co-ordination, eventDescription=There is a lack of co-ordination in between the students and no friendly relation to each other.  Through good talk, learning game we will improve co-ordination in between the students., eventDate=2018-12-08, employeeId=100043, employeeName=Ajay Rathnam, volunteerHours=2.0, travelHours=0.0, livesImpacted=2.0, businessUnit=Quality Engineering &Assurance, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:34:20,445 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046588, baseLocation=Chennai, beneficiaryName=ADW Primary school chitlapakkam, councilName=Chennai BPS Outreach, eventName=BAT, eventDescription=BAT, eventDate=2018-12-03, employeeId=100044, employeeName=Asif Kishore, volunteerHours=2.0, travelHours=0.0, livesImpacted=2.0, businessUnit=Digital Ops - F&A Delivery, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:34:20,445 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046588, baseLocation=Chennai, beneficiaryName=ADW Primary school chitlapakkam, councilName=Chennai BPS Outreach, eventName=BAT, eventDescription=BAT, eventDate=2018-12-03, employeeId=100045, employeeName=Asif Kishore, volunteerHours=2.0, travelHours=0.0, livesImpacted=2.0, businessUnit=Cognizant Digital Operations, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:34:20,446 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046611, baseLocation=Coimbatore, beneficiaryName=Panchayat Union Primary School, Keeranatham Puthupalayam, councilName=Coimbatore Outreach, eventName=TEACHING, eventDescription=Teaches English Grammar, eventDate=2018-12-13, employeeId=100046, employeeName=Nilaveni Saranya , volunteerHours=2.0, travelHours=0.5, livesImpacted=22.0, businessUnit=AVM, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:34:20,446 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046611, baseLocation=Coimbatore, beneficiaryName=Panchayat Union Primary School, Keeranatham Puthupalayam, councilName=Coimbatore Outreach, eventName=TEACHING, eventDescription=Teaches English Grammar, eventDate=2018-12-13, employeeId=100047, employeeName=Nilaveni Saranya, volunteerHours=2.0, travelHours=0.5, livesImpacted=22.0, businessUnit=CDB-AIA-IMS-AISQuAD, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:34:20,446 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046611, baseLocation=Coimbatore, beneficiaryName=Panchayat Union Primary School, Keeranatham Puthupalayam, councilName=Coimbatore Outreach, eventName=TEACHING, eventDescription=Teaches English Grammar, eventDate=2018-12-13, employeeId=100048, employeeName=Tirumeni Sugumar, volunteerHours=2.0, travelHours=0.5, livesImpacted=22.0, businessUnit=CDB-AIA-IMS-AISQuAD, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:34:20,446 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046611, baseLocation=Coimbatore, beneficiaryName=Panchayat Union Primary School, Keeranatham Puthupalayam, councilName=Coimbatore Outreach, eventName=TEACHING, eventDescription=Teaches English Grammar, eventDate=2018-12-13, employeeId=100049, employeeName=Tirumeni Sugumar, volunteerHours=2.0, travelHours=0.5, livesImpacted=22.0, businessUnit=CDB-AIA-IMS-AISQuAD, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:34:20,447 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00046611, baseLocation=Coimbatore, beneficiaryName=Panchayat Union Primary School, Keeranatham Puthupalayam, councilName=Coimbatore Outreach, eventName=TEACHING, eventDescription=Teaches English Grammar, eventDate=2018-12-13, employeeId=100050, employeeName=Tirumeni Sugumar, volunteerHours=2.0, travelHours=0.5, livesImpacted=22.0, businessUnit=CDB-AIA-IMS-AISQuAD, status=Approved, iiep=Enjoyable_Classroom_003))
2020-05-01 19:34:20,447 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100051, employeeName=Tirumeni Sugumar, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=AVM, status=Approved, iiep=Inspiring_Classroom_002))
2020-05-01 19:34:20,447 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100052, employeeName=Prasanna K Selvi, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=AVM-AIA- DI, status=Approved, iiep=Participative_Classroom_004))
2020-05-01 19:34:20,447 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100053, employeeName=Prasanna K Selvi, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=CIS DCO, status=Approved, iiep=Insightful_Corridor_005))
2020-05-01 19:34:20,447 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100054, employeeName=AkashayaDevi, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=CDB-AIA-IMS-BI, status=Approved, iiep=Inspiring_Corridor_006))
2020-05-01 19:34:20,448 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100055, employeeName=Sonudarya, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=RCGTH-Retail & Consumer Goods, status=Approved, iiep=Enjoyable_Corridor_007))
2020-05-01 19:34:20,451 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT00047114, baseLocation=Chennai, beneficiaryName=Panchayat Union Primary School, Amman Nagar, councilName=Chennai RCG Outreach, eventName=Be a Teacher, eventDescription=To teach 'english' (mainly spellings) to 'D' Category students of 4th std students (A and B section)., eventDate=2018-12-04, employeeId=100056, employeeName=Eswar J Dhivya, volunteerHours=0.1, travelHours=1.5, livesImpacted=1.0, businessUnit=AVM-AIA- DI, status=Approved, iiep=Participative_Corridor_008))
2020-05-01 19:34:20,451 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onNext(EventDetail(id=null, eventId=EVNT000472612, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100001, employeeName=Sundar Pichai, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:34:20,452 INFO [reactor-http-nio-4] Get data [Loggers.java:274] onComplete()
2020-05-01 19:34:21,053 INFO [PollingServerListUpdater-0] c.n.c.ChainedDynamicProperty [ChainedDynamicProperty.java:115] Flipping property: fms-events.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2020-05-01 19:35:27,167 INFO [reactor-http-nio-3] post data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=1973f1449441d857/1973f1449441d857, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@466a9759, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 19:35:27,167 INFO [reactor-http-nio-3] post data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:35:27,168 INFO [reactor-http-nio-3] post data [Loggers.java:274] | request(unbounded)
2020-05-01 19:35:27,357 INFO [reactor-http-nio-4] post data [Loggers.java:274] | onNext(EventDetail(id=null, eventId=EVNT000472612, baseLocation=Singapore, beneficiaryName=KWONG WAI SHIU HOSPITAL, councilName=Outreach Singapore, eventName=Bags of Joy Distribution, eventDescription=Thank you for all your donations of food items to make this a good Xmas for everyone! Come be a Santa and distribute these Bags of Joy to elderly low income residents in Central Singapore and feel the joy of giving!

Friends and family welcome!, eventDate=2018-12-15, employeeId=100001, employeeName=Sundar Pichai, volunteerHours=4.0, travelHours=2.0, livesImpacted=800.0, businessUnit=Banking & Financial Services, status=Approved, iiep=Insightful_Classroom_001))
2020-05-01 19:35:27,360 INFO [reactor-http-nio-4] post data [Loggers.java:274] | onComplete()
2020-05-01 19:37:08,313 ERROR [boundedElastic-1] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [00ed5077-3]  500 Server Error for HTTP GET "/feedback/feedbackData/"
java.lang.NullPointerException: null
	at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.FeedBackController#fetchAllFeedback() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/feedback/feedbackData/" [ExceptionHandlingWebHandler]
Stack trace:
		at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
		at com.fms.fmsevent.controller.FeedBackController$$FastClassBySpringCGLIB$$2044c2a2.invoke(<generated>)
		at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
		at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.proceed(PrePostAdviceReactiveMethodInterceptor.java:114)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.lambda$invoke$5(PrePostAdviceReactiveMethodInterceptor.java:101)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:156)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:73)
		at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:77)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2269)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:823)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:589)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:569)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:455)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:289)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:363)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1706)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:320)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:337)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.onNext(MonoSubscribeOn.java:144)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoSupplier.subscribe(MonoSupplier.java:61)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.run(MonoSubscribeOn.java:124)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:84)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:37)
		at java.util.concurrent.FutureTask.run(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 19:37:34,291 INFO [Thread-2] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 19:37:34,292 WARN [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588342054292, current=DOWN, previous=UP]
2020-05-01 19:37:34,292 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:37:34,296 INFO [Thread-2] c.n.u.c.ShutdownEnabledTimer [ShutdownEnabledTimer.java:67] Shutdown hook removed for: NFLoadBalancer-PingTimer-fms-events
2020-05-01 19:37:34,298 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:37:38,347 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 19:37:41,356 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 19:37:41,360 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 19:37:41,367 INFO [Thread-2] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 19:37:41,925 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 19:37:42,148 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 19:37:42,157 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 8ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 19:37:42,231 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 19:37:42,247 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:37:42,250 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:37:42,250 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:37:42,252 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:37:42,253 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:37:42,254 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:37:42,305 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 19:37:42,313 INFO [cluster-ClusterId{value='5eac2d2ef6d56c208df975d4', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:2, serverValue:243}] to localhost:27017
2020-05-01 19:37:42,315 INFO [cluster-ClusterId{value='5eac2d2ef6d56c208df975d4', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=1156200}
2020-05-01 19:37:42,319 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:37:42,356 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 19:37:42,376 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:37:42,525 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:37:42,525 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:37:43,243 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:37:43,256 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:37:43,445 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 19:37:43,447 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 19:37:43,450 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 19:37:43,450 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 19:37:43,450 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 19:37:43,450 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 19:37:43,555 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:37:43,556 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:37:43,556 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:37:43,556 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:37:43,556 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:37:43,556 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:37:43,556 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:37:43,556 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:37:43,560 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 19:37:43,560 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 19:37:43,561 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 19:37:43,562 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588342063562 with initial instances count: 3
2020-05-01 19:37:43,567 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 19:37:43,567 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588342063567, current=UP, previous=STARTING]
2020-05-01 19:37:43,567 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:37:43,572 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:37:43,577 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 19:37:43,578 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 19:37:43,876 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.345 seconds (JVM running for 302.528)
2020-05-01 19:37:43,879 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 19:39:08,734 ERROR [boundedElastic-2] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [4f0049ba-4]  500 Server Error for HTTP GET "/feedback/feedbackData/"
java.lang.NullPointerException: null
	at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.FeedBackController#fetchAllFeedback() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/feedback/feedbackData/" [ExceptionHandlingWebHandler]
Stack trace:
		at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
		at com.fms.fmsevent.controller.FeedBackController$$FastClassBySpringCGLIB$$2044c2a2.invoke(<generated>)
		at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
		at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.proceed(PrePostAdviceReactiveMethodInterceptor.java:114)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.lambda$invoke$5(PrePostAdviceReactiveMethodInterceptor.java:101)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:156)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:73)
		at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:77)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2269)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:823)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:589)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:569)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:455)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:289)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:363)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1706)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:320)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:337)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.onNext(MonoSubscribeOn.java:144)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoSupplier.subscribe(MonoSupplier.java:61)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.run(MonoSubscribeOn.java:124)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:84)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:37)
		at java.util.concurrent.FutureTask.run(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 19:39:42,048 ERROR [boundedElastic-2] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [4f0049ba-5]  500 Server Error for HTTP GET "/feedback/feedbackData/"
java.lang.NullPointerException: null
	at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.FeedBackController#fetchAllFeedback() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/feedback/feedbackData/" [ExceptionHandlingWebHandler]
Stack trace:
		at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
		at com.fms.fmsevent.controller.FeedBackController$$FastClassBySpringCGLIB$$2044c2a2.invoke(<generated>)
		at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
		at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.proceed(PrePostAdviceReactiveMethodInterceptor.java:114)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.lambda$invoke$5(PrePostAdviceReactiveMethodInterceptor.java:101)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:156)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:73)
		at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:77)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2269)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:823)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:589)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:569)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:455)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:289)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:363)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1706)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:320)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:337)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.onNext(MonoSubscribeOn.java:144)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoSupplier.subscribe(MonoSupplier.java:61)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.run(MonoSubscribeOn.java:124)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:84)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:37)
		at java.util.concurrent.FutureTask.run(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 19:40:37,537 ERROR [boundedElastic-2] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [4f0049ba-6]  500 Server Error for HTTP GET "/feedback/feedbackData"
java.lang.NullPointerException: null
	at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.FeedBackController#fetchAllFeedback() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/feedback/feedbackData" [ExceptionHandlingWebHandler]
Stack trace:
		at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
		at com.fms.fmsevent.controller.FeedBackController$$FastClassBySpringCGLIB$$2044c2a2.invoke(<generated>)
		at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
		at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.proceed(PrePostAdviceReactiveMethodInterceptor.java:114)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.lambda$invoke$5(PrePostAdviceReactiveMethodInterceptor.java:101)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:156)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:73)
		at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:77)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2269)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:823)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:589)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:569)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:455)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:289)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:363)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1706)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:320)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:337)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.onNext(MonoSubscribeOn.java:144)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoSupplier.subscribe(MonoSupplier.java:61)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.run(MonoSubscribeOn.java:124)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:84)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:37)
		at java.util.concurrent.FutureTask.run(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 19:41:23,954 ERROR [boundedElastic-2] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [4f0049ba-7]  500 Server Error for HTTP GET "/feedback/feedbackData"
java.lang.NullPointerException: null
	at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.FeedBackController#fetchAllFeedback() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/feedback/feedbackData" [ExceptionHandlingWebHandler]
Stack trace:
		at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
		at com.fms.fmsevent.controller.FeedBackController$$FastClassBySpringCGLIB$$2044c2a2.invoke(<generated>)
		at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
		at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.proceed(PrePostAdviceReactiveMethodInterceptor.java:114)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.lambda$invoke$5(PrePostAdviceReactiveMethodInterceptor.java:101)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:156)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:73)
		at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:77)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2269)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:823)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:589)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:569)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:455)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:289)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:363)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1706)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:320)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:337)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.onNext(MonoSubscribeOn.java:144)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoSupplier.subscribe(MonoSupplier.java:61)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.run(MonoSubscribeOn.java:124)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:84)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:37)
		at java.util.concurrent.FutureTask.run(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 19:42:43,560 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:43:10,141 INFO [Thread-19] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 19:43:10,142 WARN [Thread-19] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588342390142, current=DOWN, previous=UP]
2020-05-01 19:43:10,142 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:43:10,148 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:43:14,188 INFO [Thread-19] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 19:43:17,195 INFO [Thread-19] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 19:43:17,199 INFO [Thread-19] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 19:43:17,205 INFO [Thread-19] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 19:43:17,758 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 19:43:17,977 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 19:43:17,987 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 8ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 19:43:18,060 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 19:43:18,092 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:43:18,095 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:43:18,095 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:43:18,097 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:43:18,098 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:43:18,098 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:43:18,145 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 19:43:18,152 INFO [cluster-ClusterId{value='5eac2e7ef6d56c208df975d5', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:3, serverValue:246}] to localhost:27017
2020-05-01 19:43:18,154 INFO [cluster-ClusterId{value='5eac2e7ef6d56c208df975d5', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=1040200}
2020-05-01 19:43:18,157 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:43:18,186 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 19:43:18,207 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:43:18,357 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:43:18,357 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:43:19,078 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:43:19,095 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:43:19,274 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 19:43:19,276 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 19:43:19,277 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 19:43:19,277 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 19:43:19,277 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 19:43:19,277 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 19:43:19,369 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:43:19,370 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:43:19,370 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:43:19,370 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:43:19,370 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:43:19,370 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:43:19,370 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:43:19,370 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:43:19,373 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 19:43:19,374 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 19:43:19,375 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 19:43:19,375 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588342399375 with initial instances count: 3
2020-05-01 19:43:19,381 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 19:43:19,381 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588342399381, current=UP, previous=STARTING]
2020-05-01 19:43:19,381 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:43:19,386 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:43:19,390 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 19:43:19,391 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 19:43:19,697 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.307 seconds (JVM running for 638.349)
2020-05-01 19:43:19,698 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 19:43:32,169 ERROR [boundedElastic-3] o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler [CompositeLog.java:122] [d614ed9c-8]  500 Server Error for HTTP GET "/feedback/feedbackData"
java.lang.NullPointerException: null
	at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.fms.fmsevent.controller.FeedBackController#fetchAllFeedback() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	|_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/feedback/feedbackData" [ExceptionHandlingWebHandler]
Stack trace:
		at com.fms.fmsevent.controller.FeedBackController.fetchAllFeedback(FeedBackController.java:54)
		at com.fms.fmsevent.controller.FeedBackController$$FastClassBySpringCGLIB$$2044c2a2.invoke(<generated>)
		at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
		at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.proceed(PrePostAdviceReactiveMethodInterceptor.java:114)
		at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.lambda$invoke$5(PrePostAdviceReactiveMethodInterceptor.java:101)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:156)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:73)
		at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:77)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:203)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:296)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:173)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:132)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:145)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:107)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:274)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:851)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:35)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:112)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:184)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:81)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:441)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:267)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:228)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2269)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2075)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1949)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:823)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:589)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:569)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:455)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:289)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:225)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:76)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:363)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:69)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:161)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:55)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:100)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:160)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:104)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1706)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:320)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:337)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.onNext(MonoSubscribeOn.java:144)
		at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:90)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1705)
		at reactor.core.publisher.MonoSupplier.subscribe(MonoSupplier.java:61)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4110)
		at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.run(MonoSubscribeOn.java:124)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:84)
		at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:37)
		at java.util.concurrent.FutureTask.run(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
		at java.lang.Thread.run(Unknown Source)
2020-05-01 19:44:31,302 INFO [Thread-30] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 19:44:31,303 WARN [Thread-30] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588342471303, current=DOWN, previous=UP]
2020-05-01 19:44:31,303 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:44:31,309 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:44:35,351 INFO [Thread-30] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 19:44:38,359 INFO [Thread-30] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 19:44:38,362 INFO [Thread-30] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 19:44:38,368 INFO [Thread-30] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 19:44:38,944 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 19:44:39,152 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 19:44:39,160 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 8ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 19:44:39,230 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=82e88905-d4fa-3d98-8a71-bf4e68d5e856
2020-05-01 19:44:39,246 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:44:39,249 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:44:39,249 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:44:39,250 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:44:39,252 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:44:39,252 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:44:39,298 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 19:44:39,307 INFO [cluster-ClusterId{value='5eac2ecff6d56c208df975d6', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:4, serverValue:247}] to localhost:27017
2020-05-01 19:44:39,309 INFO [cluster-ClusterId{value='5eac2ecff6d56c208df975d6', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=882000}
2020-05-01 19:44:39,309 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:44:39,341 WARN [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:61] Unable to start LiveReload server
2020-05-01 19:44:39,359 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:44:39,496 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:44:39,496 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:44:40,212 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:44:40,225 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:44:40,402 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 19:44:40,404 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 19:44:40,405 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 19:44:40,405 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 19:44:40,405 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 19:44:40,405 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 19:44:40,499 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:44:40,499 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:44:40,499 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:44:40,500 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:44:40,500 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:44:40,500 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:44:40,500 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:44:40,500 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:44:40,503 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 19:44:40,504 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 19:44:40,504 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 19:44:40,505 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588342480505 with initial instances count: 3
2020-05-01 19:44:40,511 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 19:44:40,511 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588342480511, current=UP, previous=STARTING]
2020-05-01 19:44:40,511 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:44:40,515 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:44:40,520 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 19:44:40,521 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 19:44:40,815 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.249 seconds (JVM running for 719.468)
2020-05-01 19:44:40,817 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 19:45:13,131 INFO [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor [DeferredLog.java:225] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-01 19:45:13,527 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 19:45:13,996 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 19:45:14,049 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 50ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 19:45:14,287 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=e45b983b-1530-3d2c-baa8-74504fc26a7e
2020-05-01 19:45:14,482 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:45:14,493 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:45:14,494 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:45:14,498 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:45:14,499 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:45:14,502 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:45:14,728 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 19:45:14,828 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:45:14,916 INFO [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:58] LiveReload server is running on port 35729
2020-05-01 19:45:14,972 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:45:15,128 INFO [cluster-ClusterId{value='5eac2ef21188fb1cfcd3897e', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:1, serverValue:248}] to localhost:27017
2020-05-01 19:45:15,132 INFO [cluster-ClusterId{value='5eac2ef21188fb1cfcd3897e', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=3316800}
2020-05-01 19:45:15,490 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:45:15,490 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:45:15,493 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:45:15,493 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:45:16,387 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:45:16,403 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:45:16,729 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 19:45:16,770 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 19:45:17,037 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 19:45:17,037 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 19:45:17,130 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 19:45:17,131 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 19:45:17,306 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:45:17,427 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:45:17,428 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:45:17,428 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:45:17,428 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:45:17,428 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:45:17,429 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:45:17,429 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:45:21,518 ERROR [restartedMain] c.n.d.s.t.d.RedirectingEurekaHttpClient [RedirectingEurekaHttpClient.java:83] Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:8761/eureka/}
com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused: connect
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
	at com.sun.jersey.api.client.Client.handle(Client.java:652)
	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
	at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:509)
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:196)
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplications(AbstractJerseyEurekaHttpClient.java:167)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1074)
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:988)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:433)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:279)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:275)
	at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:67)
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:359)
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:389)
	at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:186)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:356)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:129)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:282)
	at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:499)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration$$EnhancerBySpringCGLIB$$7bd9ccf9.getEurekaClient(<generated>)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:57)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:38)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:83)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.finishRefresh(ReactiveWebServerApplicationContext.java:116)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.fms.fmsevent.FmseventApplication.main(FmseventApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.doConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connectToAddress(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connect(Unknown Source)
	at java.net.PlainSocketImpl.connect(Unknown Source)
	at java.net.SocksSocketImpl.connect(Unknown Source)
	at java.net.Socket.connect(Unknown Source)
	at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144)
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:134)
	at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:605)
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:440)
	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173)
	... 81 common frames omitted
2020-05-01 19:45:21,520 WARN [restartedMain] c.n.d.s.t.d.RetryableEurekaHttpClient [RetryableEurekaHttpClient.java:130] Request execution failed with message: java.net.ConnectException: Connection refused: connect
2020-05-01 19:45:21,522 ERROR [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:995] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1074)
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:988)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:433)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:279)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:275)
	at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:67)
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:359)
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:389)
	at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:186)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:356)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:129)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:282)
	at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:499)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration$$EnhancerBySpringCGLIB$$7bd9ccf9.getEurekaClient(<generated>)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:57)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:38)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:83)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894)
	at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.finishRefresh(ReactiveWebServerApplicationContext.java:116)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
	at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.fms.fmsevent.FmseventApplication.main(FmseventApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-05-01 19:45:21,523 WARN [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:300] Using default backup registry implementation which does not do anything.
2020-05-01 19:45:21,527 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 19:45:21,531 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 19:45:21,537 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588342521535 with initial instances count: 0
2020-05-01 19:45:21,542 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 19:45:21,543 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588342521543, current=UP, previous=STARTING]
2020-05-01 19:45:21,544 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:45:21,586 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 19:45:21,588 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 19:45:21,921 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 9.243 seconds (JVM running for 10.066)
2020-05-01 19:45:25,572 ERROR [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.s.t.d.RedirectingEurekaHttpClient [RedirectingEurekaHttpClient.java:83] Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:8761/eureka/}
com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused: connect
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
	at com.sun.jersey.api.client.Client.handle(Client.java:652)
	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
	at com.sun.jersey.api.client.WebResource$Builder.post(WebResource.java:570)
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.register(AbstractJerseyEurekaHttpClient.java:57)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:850)
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)
	at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.doConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connectToAddress(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connect(Unknown Source)
	at java.net.PlainSocketImpl.connect(Unknown Source)
	at java.net.SocksSocketImpl.connect(Unknown Source)
	at java.net.Socket.connect(Unknown Source)
	at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144)
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:134)
	at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:605)
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:440)
	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173)
	... 30 common frames omitted
2020-05-01 19:45:25,572 WARN [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.s.t.d.RetryableEurekaHttpClient [RetryableEurekaHttpClient.java:130] Request execution failed with message: java.net.ConnectException: Connection refused: connect
2020-05-01 19:45:25,573 WARN [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:852] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration failed Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:850)
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)
	at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
2020-05-01 19:45:25,573 WARN [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:125] There was a problem with the instance info replicator
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:850)
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)
	at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
2020-05-01 19:45:51,528 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:45:51,532 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:45:51,533 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:45:51,533 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:45:51,534 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:45:51,535 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:45:51,536 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:45:55,545 ERROR [DiscoveryClient-HeartbeatExecutor-0] c.n.d.s.t.d.RedirectingEurekaHttpClient [RedirectingEurekaHttpClient.java:83] Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:8761/eureka/}
com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused: connect
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
	at com.sun.jersey.api.client.Client.handle(Client.java:652)
	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
	at com.sun.jersey.api.client.WebResource$Builder.put(WebResource.java:529)
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:103)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:867)
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1436)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.doConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connectToAddress(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connect(Unknown Source)
	at java.net.PlainSocketImpl.connect(Unknown Source)
	at java.net.SocksSocketImpl.connect(Unknown Source)
	at java.net.Socket.connect(Unknown Source)
	at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144)
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:134)
	at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:605)
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:440)
	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173)
	... 27 common frames omitted
2020-05-01 19:45:55,545 WARN [DiscoveryClient-HeartbeatExecutor-0] c.n.d.s.t.d.RetryableEurekaHttpClient [RetryableEurekaHttpClient.java:130] Request execution failed with message: java.net.ConnectException: Connection refused: connect
2020-05-01 19:45:55,546 ERROR [DiscoveryClient-HeartbeatExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:881] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - was unable to send heartbeat!
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:867)
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1436)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
2020-05-01 19:45:55,556 ERROR [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.s.t.d.RedirectingEurekaHttpClient [RedirectingEurekaHttpClient.java:83] Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:8761/eureka/}
com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused: connect
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
	at com.sun.jersey.api.client.Client.handle(Client.java:652)
	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
	at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:509)
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:196)
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplications(AbstractJerseyEurekaHttpClient.java:167)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1074)
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:988)
	at com.netflix.discovery.DiscoveryClient.refreshRegistry(DiscoveryClient.java:1510)
	at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1477)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.doConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connectToAddress(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connect(Unknown Source)
	at java.net.PlainSocketImpl.connect(Unknown Source)
	at java.net.SocksSocketImpl.connect(Unknown Source)
	at java.net.Socket.connect(Unknown Source)
	at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144)
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:134)
	at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:605)
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:440)
	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173)
	... 30 common frames omitted
2020-05-01 19:45:55,556 WARN [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.s.t.d.RetryableEurekaHttpClient [RetryableEurekaHttpClient.java:130] Request execution failed with message: java.net.ConnectException: Connection refused: connect
2020-05-01 19:45:55,557 ERROR [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:995] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1074)
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:988)
	at com.netflix.discovery.DiscoveryClient.refreshRegistry(DiscoveryClient.java:1510)
	at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1477)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
2020-05-01 19:45:55,575 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:45:59,605 ERROR [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.s.t.d.RedirectingEurekaHttpClient [RedirectingEurekaHttpClient.java:83] Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:8761/eureka/}
com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused: connect
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
	at com.sun.jersey.api.client.Client.handle(Client.java:652)
	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
	at com.sun.jersey.api.client.WebResource$Builder.post(WebResource.java:570)
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.register(AbstractJerseyEurekaHttpClient.java:57)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:850)
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.doConnect(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connectToAddress(Unknown Source)
	at java.net.AbstractPlainSocketImpl.connect(Unknown Source)
	at java.net.PlainSocketImpl.connect(Unknown Source)
	at java.net.SocksSocketImpl.connect(Unknown Source)
	at java.net.Socket.connect(Unknown Source)
	at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144)
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:134)
	at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:605)
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:440)
	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173)
	... 29 common frames omitted
2020-05-01 19:45:59,606 WARN [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.s.t.d.RetryableEurekaHttpClient [RetryableEurekaHttpClient.java:130] Request execution failed with message: java.net.ConnectException: Connection refused: connect
2020-05-01 19:45:59,607 WARN [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:852] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration failed Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:850)
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
2020-05-01 19:45:59,608 WARN [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:125] There was a problem with the instance info replicator
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:850)
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
2020-05-01 19:46:25,557 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:46:25,558 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:46:25,559 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:46:25,559 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:46:25,559 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:46:25,559 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:46:25,560 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:46:25,590 INFO [DiscoveryClient-HeartbeatExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:871] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - Re-registering apps/FMS-SERVICE
2020-05-01 19:46:25,590 INFO [DiscoveryClient-HeartbeatExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:46:25,631 INFO [DiscoveryClient-HeartbeatExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:46:25,636 INFO [DiscoveryClient-CacheRefreshExecutor-0] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 19:46:43,138 INFO [boundedElastic-1] fetch data [Loggers.java:274] onContextUpdate(Context3{class brave.propagation.TraceContext=3c89af692354c87f/3c89af692354c87f, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@215f95f6, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 19:46:43,140 INFO [boundedElastic-1] fetch data [Loggers.java:274] onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:46:43,140 INFO [boundedElastic-1] fetch data [Loggers.java:274] request(unbounded)
2020-05-01 19:46:43,218 INFO [reactor-http-nio-4] fetch data [Loggers.java:274] onNext(FeedbackQuestion(fbQuestion=What did you like about the volunteering activity?, fbType=participant, answers=null, total_answers=0))
2020-05-01 19:46:43,218 INFO [reactor-http-nio-4] fetch data [Loggers.java:274] onNext(FeedbackQuestion(fbQuestion=Hey there! Please share the feedback for Unregistering from the event?, fbType=unregistered, answers=[FeedbackAnswer(description=Unexpected Personal Commitment), FeedbackAnswer(description=Unexpected Official Work), FeedbackAnswer(description=Event Not What I Expected), FeedbackAnswer(description=Did Not Receive Further Info about event), FeedbackAnswer(description=Incorrectly Registered), FeedbackAnswer(description=Do Not Wish to disclose)], total_answers=6))
2020-05-01 19:46:43,219 INFO [reactor-http-nio-4] fetch data [Loggers.java:274] onNext(FeedbackQuestion(fbQuestion=How Do you Rate Overall Event?, fbType=participant, answers=[FeedbackAnswer(description=Very Happy), FeedbackAnswer(description=Happy), FeedbackAnswer(description=Ok), FeedbackAnswer(description=Neutral), FeedbackAnswer(description=Disappointed)], total_answers=5))
2020-05-01 19:46:43,220 INFO [reactor-http-nio-4] fetch data [Loggers.java:274] onNext(FeedbackQuestion(fbQuestion=Hey there! You have registered for an event on saturday.We would like to know the reason for not joining the event to understand if the team which created the event has some room for improvements in their process,so that we get 100% participation from the registered attendees, fbType=notattended, answers=[FeedbackAnswer(description=DO Not wish to Disclose), FeedbackAnswer(description=Unexpected Personal Commitment), FeedbackAnswer(description=Unexpected Official Work), FeedbackAnswer(description=Even not what I expected), FeedbackAnswer(description=Did not receive further information about the event), FeedbackAnswer(description=incorrectly registered)], total_answers=6))
2020-05-01 19:46:43,221 INFO [reactor-http-nio-4] fetch data [Loggers.java:274] onComplete()
2020-05-01 19:46:49,609 INFO [Thread-8] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:65] Unregistering application FMS-SERVICE with eureka with status DOWN
2020-05-01 19:46:49,610 WARN [Thread-8] c.n.d.DiscoveryClient [DiscoveryClient.java:1328] Saw local status change event StatusChangeEvent [timestamp=1588342609610, current=DOWN, previous=UP]
2020-05-01 19:46:49,610 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:46:49,618 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:46:53,660 INFO [Thread-8] c.n.d.DiscoveryClient [DiscoveryClient.java:909] Shutting down DiscoveryClient ...
2020-05-01 19:46:56,663 WARN [DiscoveryClient-0] c.n.d.TimedSupervisorTask [TimedSupervisorTask.java:90] task supervisor shutting down, can't accept the task
2020-05-01 19:46:56,665 INFO [Thread-8] c.n.d.DiscoveryClient [DiscoveryClient.java:945] Unregistering ...
2020-05-01 19:46:56,670 INFO [Thread-8] c.n.d.DiscoveryClient [DiscoveryClient.java:947] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - deregister  status: 200
2020-05-01 19:46:56,679 INFO [Thread-8] c.n.d.DiscoveryClient [DiscoveryClient.java:934] Completed shut down of DiscoveryClient
2020-05-01 19:46:57,212 INFO [restartedMain] c.f.f.FmseventApplication [SpringApplication.java:651] No active profile set, falling back to default profiles: default
2020-05-01 19:46:57,434 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:127] Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2020-05-01 19:46:57,444 INFO [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate [RepositoryConfigurationDelegate.java:187] Finished Spring Data repository scanning in 10ms. Found 2 Reactive MongoDB repository interfaces.
2020-05-01 19:46:57,520 INFO [restartedMain] o.s.c.c.s.GenericScope [GenericScope.java:295] BeanFactory id=e45b983b-1530-3d2c-baa8-74504fc26a7e
2020-05-01 19:46:57,537 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:46:57,540 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodSecurityExpressionHandler' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:46:57,540 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:46:57,541 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:46:57,543 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactiveLoadBalancerConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:46:57,543 INFO [restartedMain] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker [PostProcessorRegistrationDelegate.java:330] Bean 'deferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-01 19:46:57,592 INFO [restartedMain] o.m.d.cluster [SLF4JLogger.java:71] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-01 19:46:57,601 INFO [cluster-ClusterId{value='5eac2f591188fb1cfcd3897f', description='null'}-localhost:27017] o.m.d.connection [SLF4JLogger.java:71] Opened connection [connectionId{localValue:2, serverValue:249}] to localhost:27017
2020-05-01 19:46:57,603 INFO [cluster-ClusterId{value='5eac2f591188fb1cfcd3897f', description='null'}-localhost:27017] o.m.d.cluster [SLF4JLogger.java:71] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=994800}
2020-05-01 19:46:57,604 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:46:57,634 INFO [restartedMain] o.s.b.d.a.OptionalLiveReloadServer [OptionalLiveReloadServer.java:58] LiveReload server is running on port 35729
2020-05-01 19:46:57,655 WARN [restartedMain] o.s.d.c.CustomConversions [CustomConversions.java:263] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-05-01 19:46:57,841 WARN [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:121] No URLs will be polled as dynamic configuration sources.
2020-05-01 19:46:57,841 INFO [restartedMain] c.n.c.s.URLConfigurationSource [URLConfigurationSource.java:122] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-05-01 19:46:58,535 WARN [restartedMain] o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger [BlockingLoadBalancerClientAutoConfiguration.java:86] You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:46:58,548 WARN [restartedMain] o.s.c.c.l.r.ReactorLoadBalancerClientAutoConfiguration$ReactorLoadBalancerClientRibbonWarnLogger [ReactorLoadBalancerClientAutoConfiguration.java:77] You have RibbonLoadBalancerClient on your classpath. LoadBalancerExchangeFilterFunction that uses it under the hood will be used by default. Spring Cloud Ribbon is now in maintenance mode, so we suggest switching to ReactorLoadBalancerExchangeFilterFunction instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2020-05-01 19:46:58,740 INFO [restartedMain] o.s.c.n.e.InstanceInfoFactory [InstanceInfoFactory.java:72] Setting initial instance status as: STARTING
2020-05-01 19:46:58,742 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:368] Initializing Eureka in region us-east-1
2020-05-01 19:46:58,744 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:70] Using JSON encoding codec LegacyJacksonJson
2020-05-01 19:46:58,744 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:71] Using JSON decoding codec LegacyJacksonJson
2020-05-01 19:46:58,744 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:80] Using XML encoding codec XStreamXml
2020-05-01 19:46:58,745 INFO [restartedMain] c.n.d.p.DiscoveryJerseyProvider [DiscoveryJerseyProvider.java:81] Using XML decoding codec XStreamXml
2020-05-01 19:46:58,850 INFO [restartedMain] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:46:58,851 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:981] Disable delta property : false
2020-05-01 19:46:58,851 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:982] Single vip registry refresh property : null
2020-05-01 19:46:58,852 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:983] Force full registry fetch : false
2020-05-01 19:46:58,852 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:984] Application is null : false
2020-05-01 19:46:58,852 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:985] Registered Applications size is zero : true
2020-05-01 19:46:58,852 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:987] Application version is -1: true
2020-05-01 19:46:58,852 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1070] Getting all instance registry info from the eureka server
2020-05-01 19:46:58,856 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1079] The response status is 200
2020-05-01 19:46:58,857 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1294] Starting heartbeat executor: renew interval is: 30
2020-05-01 19:46:58,858 INFO [restartedMain] c.n.d.InstanceInfoReplicator [InstanceInfoReplicator.java:60] InstanceInfoReplicator onDemand update allowed rate per min is 4
2020-05-01 19:46:58,859 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:468] Discovery Client initialized at timestamp 1588342618859 with initial instances count: 3
2020-05-01 19:46:58,864 INFO [restartedMain] o.s.c.n.e.s.EurekaServiceRegistry [EurekaServiceRegistry.java:41] Registering application FMS-SERVICE with eureka with status UP
2020-05-01 19:46:58,864 INFO [restartedMain] c.n.d.DiscoveryClient [DiscoveryClient.java:1330] Saw local status change event StatusChangeEvent [timestamp=1588342618864, current=UP, previous=STARTING]
2020-05-01 19:46:58,865 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:847] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service: registering service...
2020-05-01 19:46:58,870 INFO [DiscoveryClient-InstanceInfoReplicator-0] c.n.d.DiscoveryClient [DiscoveryClient.java:856] DiscoveryClient_FMS-SERVICE/DESKTOP-1QKKEMV:fms-service - registration status: 204
2020-05-01 19:46:58,875 INFO [restartedMain] o.s.b.w.e.n.NettyWebServer [NettyWebServer.java:118] Netty started on port(s): 8080
2020-05-01 19:46:58,875 INFO [restartedMain] o.s.c.n.e.s.EurekaAutoServiceRegistration [EurekaAutoServiceRegistration.java:145] Updating port to 8080
2020-05-01 19:46:59,188 INFO [boundedElastic-1] fetch data [Loggers.java:274] onContextUpdate(Context3{class brave.propagation.TraceContext=040210166c168c1c/040210166c168c1c, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@321babff, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 19:46:59,188 INFO [boundedElastic-1] fetch data [Loggers.java:274] onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:46:59,188 INFO [boundedElastic-1] fetch data [Loggers.java:274] request(unbounded)
2020-05-01 19:46:59,195 INFO [restartedMain] c.f.f.FmseventApplication [StartupInfoLogger.java:61] Started FmseventApplication in 2.362 seconds (JVM running for 107.339)
2020-05-01 19:46:59,197 INFO [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener [ConditionEvaluationDeltaLoggingListener.java:63] Condition evaluation unchanged
2020-05-01 19:46:59,198 INFO [reactor-http-nio-3] fetch data [Loggers.java:274] onNext(FeedbackQuestion(fbQuestion=What did you like about the volunteering activity?, fbType=participant, answers=null, total_answers=0))
2020-05-01 19:46:59,198 INFO [reactor-http-nio-3] fetch data [Loggers.java:274] onNext(FeedbackQuestion(fbQuestion=Hey there! Please share the feedback for Unregistering from the event?, fbType=unregistered, answers=[FeedbackAnswer(description=Unexpected Personal Commitment), FeedbackAnswer(description=Unexpected Official Work), FeedbackAnswer(description=Event Not What I Expected), FeedbackAnswer(description=Did Not Receive Further Info about event), FeedbackAnswer(description=Incorrectly Registered), FeedbackAnswer(description=Do Not Wish to disclose)], total_answers=6))
2020-05-01 19:46:59,198 INFO [reactor-http-nio-3] fetch data [Loggers.java:274] onNext(FeedbackQuestion(fbQuestion=How Do you Rate Overall Event?, fbType=participant, answers=[FeedbackAnswer(description=Very Happy), FeedbackAnswer(description=Happy), FeedbackAnswer(description=Ok), FeedbackAnswer(description=Neutral), FeedbackAnswer(description=Disappointed)], total_answers=5))
2020-05-01 19:46:59,199 INFO [reactor-http-nio-3] fetch data [Loggers.java:274] onNext(FeedbackQuestion(fbQuestion=Hey there! You have registered for an event on saturday.We would like to know the reason for not joining the event to understand if the team which created the event has some room for improvements in their process,so that we get 100% participation from the registered attendees, fbType=notattended, answers=[FeedbackAnswer(description=DO Not wish to Disclose), FeedbackAnswer(description=Unexpected Personal Commitment), FeedbackAnswer(description=Unexpected Official Work), FeedbackAnswer(description=Even not what I expected), FeedbackAnswer(description=Did not receive further information about the event), FeedbackAnswer(description=incorrectly registered)], total_answers=6))
2020-05-01 19:46:59,200 INFO [reactor-http-nio-3] fetch data [Loggers.java:274] onComplete()
2020-05-01 19:48:45,905 INFO [reactor-http-nio-2] Delete data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=eb96eb66a874cca4/eb96eb66a874cca4, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@15a8ad35, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 19:48:45,906 INFO [reactor-http-nio-2] Delete data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:48:45,906 INFO [reactor-http-nio-2] Delete data [Loggers.java:274] | request(unbounded)
2020-05-01 19:48:45,968 INFO [reactor-http-nio-2] Delete data [Loggers.java:274] | onNext(Successfully Deleted !)
2020-05-01 19:48:45,973 INFO [reactor-http-nio-2] Delete data [Loggers.java:274] | onComplete()
2020-05-01 19:48:59,332 INFO [reactor-http-nio-2] post data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=487f94dc70d9154c/487f94dc70d9154c, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@7f670fc3, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 19:48:59,333 INFO [reactor-http-nio-2] post data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 19:48:59,333 INFO [reactor-http-nio-2] post data [Loggers.java:274] | request(unbounded)
2020-05-01 19:48:59,353 INFO [reactor-http-nio-2] post data [Loggers.java:274] | onNext(FeedbackQuestion(fbQuestion=What did you like about the volunteering activity?, fbType=participant, answers=null, total_answers=null))
2020-05-01 19:48:59,354 INFO [reactor-http-nio-2] post data [Loggers.java:274] | onComplete()
2020-05-01 19:51:58,854 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 19:56:58,858 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 20:01:58,860 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 20:06:02,719 INFO [reactor-http-nio-2] post data [Loggers.java:274] | onContextUpdate(Context3{class brave.propagation.TraceContext=9e29eb8f1650e925/9e29eb8f1650e925, interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@799aeef7, interface org.springframework.security.core.context.SecurityContext=MonoLiftFuseable})
2020-05-01 20:06:02,719 INFO [reactor-http-nio-2] post data [Loggers.java:274] | onSubscribe([Fuseable] ScopePassingSpanSubscriber)
2020-05-01 20:06:02,719 INFO [reactor-http-nio-2] post data [Loggers.java:274] | request(unbounded)
2020-05-01 20:06:08,915 INFO [reactor-http-nio-2] post data [Loggers.java:274] | onNext(Mail Sent Successfully!)
2020-05-01 20:06:08,916 INFO [reactor-http-nio-2] post data [Loggers.java:274] | onComplete()
2020-05-01 20:06:58,863 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 20:11:58,865 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 20:16:57,512 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 20:21:57,515 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 20:26:57,517 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 20:31:57,519 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
2020-05-01 20:36:57,520 INFO [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.a.ConfigClusterResolver [ConfigClusterResolver.java:43] Resolving eureka endpoints via configuration
